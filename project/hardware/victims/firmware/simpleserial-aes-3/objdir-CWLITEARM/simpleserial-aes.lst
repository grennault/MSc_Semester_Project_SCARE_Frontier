   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"simpleserial-aes.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.reset,"ax",%progbits
  16              		.align	1
  17              		.global	reset
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	reset:
  25              	.LVL0:
  26              	.LFB3:
  27              		.file 1 "simpleserial-aes.c"
   1:simpleserial-aes.c **** /*
   2:simpleserial-aes.c ****     This file is part of the ChipWhisperer Example Targets
   3:simpleserial-aes.c ****     Copyright (C) 2012-2017 NewAE Technology Inc.
   4:simpleserial-aes.c **** 
   5:simpleserial-aes.c ****     This program is free software: you can redistribute it and/or modify
   6:simpleserial-aes.c ****     it under the terms of the GNU General Public License as published by
   7:simpleserial-aes.c ****     the Free Software Foundation, either version 3 of the License, or
   8:simpleserial-aes.c ****     (at your option) any later version.
   9:simpleserial-aes.c **** 
  10:simpleserial-aes.c ****     This program is distributed in the hope that it will be useful,
  11:simpleserial-aes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:simpleserial-aes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:simpleserial-aes.c ****     GNU General Public License for more details.
  14:simpleserial-aes.c **** 
  15:simpleserial-aes.c ****     You should have received a copy of the GNU General Public License
  16:simpleserial-aes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:simpleserial-aes.c **** */
  18:simpleserial-aes.c **** 
  19:simpleserial-aes.c **** #include "aes-independant.h"
  20:simpleserial-aes.c **** #include "hal.h"
  21:simpleserial-aes.c **** #include "simpleserial.h"
  22:simpleserial-aes.c **** #include <stdint.h>
  23:simpleserial-aes.c **** #include <stdlib.h>
  24:simpleserial-aes.c **** 
  25:simpleserial-aes.c **** uint8_t get_mask(uint8_t* m, uint8_t len)
  26:simpleserial-aes.c **** {
  27:simpleserial-aes.c ****   aes_indep_mask(m, len);
  28:simpleserial-aes.c ****   return 0x00;
  29:simpleserial-aes.c **** }
  30:simpleserial-aes.c **** 
  31:simpleserial-aes.c **** uint8_t get_key(uint8_t* k, uint8_t len)
  32:simpleserial-aes.c **** {
  33:simpleserial-aes.c **** 	aes_indep_key(k);
  34:simpleserial-aes.c **** 	return 0x00;
  35:simpleserial-aes.c **** }
  36:simpleserial-aes.c **** 
  37:simpleserial-aes.c **** uint8_t get_pt(uint8_t* pt, uint8_t len)
  38:simpleserial-aes.c **** {
  39:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
  40:simpleserial-aes.c **** 
  41:simpleserial-aes.c **** 	trigger_high();
  42:simpleserial-aes.c **** 
  43:simpleserial-aes.c ****   #ifdef ADD_JITTER
  44:simpleserial-aes.c ****   for (volatile uint8_t k = 0; k < (*pt & 0x0F); k++);
  45:simpleserial-aes.c ****   #endif
  46:simpleserial-aes.c **** 
  47:simpleserial-aes.c **** 	aes_indep_enc(pt); /* encrypting the data block */
  48:simpleserial-aes.c **** 	trigger_low();
  49:simpleserial-aes.c **** 
  50:simpleserial-aes.c ****     aes_indep_enc_posttrigger(pt);
  51:simpleserial-aes.c **** 
  52:simpleserial-aes.c **** 	simpleserial_put('r', 16, pt);
  53:simpleserial-aes.c **** 	return 0x00;
  54:simpleserial-aes.c **** }
  55:simpleserial-aes.c **** 
  56:simpleserial-aes.c **** uint8_t reset(uint8_t* x, uint8_t len)
  57:simpleserial-aes.c **** {
  28              		.loc 1 57 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  58:simpleserial-aes.c ****     // Reset key here if needed
  59:simpleserial-aes.c **** 	return 0x00;
  33              		.loc 1 59 2 view .LVU1
  60:simpleserial-aes.c **** }
  34              		.loc 1 60 1 is_stmt 0 view .LVU2
  35 0000 0020     		movs	r0, #0
  36              	.LVL1:
  37              		.loc 1 60 1 view .LVU3
  38 0002 7047     		bx	lr
  39              		.cfi_endproc
  40              	.LFE3:
  42              		.section	.text.enc_multi_setnum,"ax",%progbits
  43              		.align	1
  44              		.global	enc_multi_setnum
  45              		.syntax unified
  46              		.thumb
  47              		.thumb_func
  48              		.fpu softvfp
  50              	enc_multi_setnum:
  51              	.LVL2:
  52              	.LFB5:
  61:simpleserial-aes.c **** 
  62:simpleserial-aes.c **** static uint16_t num_encryption_rounds = 10;
  63:simpleserial-aes.c **** 
  64:simpleserial-aes.c **** uint8_t enc_multi_getpt(uint8_t* pt, uint8_t len)
  65:simpleserial-aes.c **** {
  66:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
  67:simpleserial-aes.c **** 
  68:simpleserial-aes.c ****     for(unsigned int i = 0; i < num_encryption_rounds; i++){
  69:simpleserial-aes.c ****         trigger_high();
  70:simpleserial-aes.c ****         aes_indep_enc(pt);
  71:simpleserial-aes.c ****         trigger_low();
  72:simpleserial-aes.c ****     }
  73:simpleserial-aes.c **** 
  74:simpleserial-aes.c ****     aes_indep_enc_posttrigger(pt);
  75:simpleserial-aes.c **** 	simpleserial_put('r', 16, pt);
  76:simpleserial-aes.c ****     return 0;
  77:simpleserial-aes.c **** }
  78:simpleserial-aes.c **** 
  79:simpleserial-aes.c **** uint8_t enc_multi_setnum(uint8_t* t, uint8_t len)
  80:simpleserial-aes.c **** {
  53              		.loc 1 80 1 is_stmt 1 view -0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  81:simpleserial-aes.c ****     //Assumes user entered a number like [0, 200] to mean "200"
  82:simpleserial-aes.c ****     //which is most sane looking for humans I think
  83:simpleserial-aes.c ****     num_encryption_rounds = t[1];
  58              		.loc 1 83 5 view .LVU5
  84:simpleserial-aes.c ****     num_encryption_rounds |= t[0] << 8;
  59              		.loc 1 84 5 view .LVU6
  60              		.loc 1 84 27 is_stmt 0 view .LVU7
  61 0000 0388     		ldrh	r3, [r0]	@ unaligned
  62 0002 024A     		ldr	r2, .L3
  63 0004 5BBA     		rev16	r3, r3
  64 0006 1380     		strh	r3, [r2]	@ movhi
  85:simpleserial-aes.c ****     return 0;
  65              		.loc 1 85 5 is_stmt 1 view .LVU8
  86:simpleserial-aes.c **** }
  66              		.loc 1 86 1 is_stmt 0 view .LVU9
  67 0008 0020     		movs	r0, #0
  68              	.LVL3:
  69              		.loc 1 86 1 view .LVU10
  70 000a 7047     		bx	lr
  71              	.L4:
  72              		.align	2
  73              	.L3:
  74 000c 00000000 		.word	.LANCHOR0
  75              		.cfi_endproc
  76              	.LFE5:
  78              		.section	.text.get_mask,"ax",%progbits
  79              		.align	1
  80              		.global	get_mask
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	get_mask:
  87              	.LVL4:
  88              	.LFB0:
  26:simpleserial-aes.c ****   aes_indep_mask(m, len);
  89              		.loc 1 26 1 is_stmt 1 view -0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  27:simpleserial-aes.c ****   return 0x00;
  93              		.loc 1 27 3 view .LVU12
  26:simpleserial-aes.c ****   aes_indep_mask(m, len);
  94              		.loc 1 26 1 is_stmt 0 view .LVU13
  95 0000 08B5     		push	{r3, lr}
  96              	.LCFI0:
  97              		.cfi_def_cfa_offset 8
  98              		.cfi_offset 3, -8
  99              		.cfi_offset 14, -4
  27:simpleserial-aes.c ****   return 0x00;
 100              		.loc 1 27 3 view .LVU14
 101 0002 FFF7FEFF 		bl	aes_indep_mask
 102              	.LVL5:
  28:simpleserial-aes.c **** }
 103              		.loc 1 28 3 is_stmt 1 view .LVU15
  29:simpleserial-aes.c **** 
 104              		.loc 1 29 1 is_stmt 0 view .LVU16
 105 0006 0020     		movs	r0, #0
 106 0008 08BD     		pop	{r3, pc}
 107              		.cfi_endproc
 108              	.LFE0:
 110              		.section	.text.get_key,"ax",%progbits
 111              		.align	1
 112              		.global	get_key
 113              		.syntax unified
 114              		.thumb
 115              		.thumb_func
 116              		.fpu softvfp
 118              	get_key:
 119              	.LVL6:
 120              	.LFB1:
  32:simpleserial-aes.c **** 	aes_indep_key(k);
 121              		.loc 1 32 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
  33:simpleserial-aes.c **** 	return 0x00;
 125              		.loc 1 33 2 view .LVU18
  32:simpleserial-aes.c **** 	aes_indep_key(k);
 126              		.loc 1 32 1 is_stmt 0 view .LVU19
 127 0000 08B5     		push	{r3, lr}
 128              	.LCFI1:
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 3, -8
 131              		.cfi_offset 14, -4
  33:simpleserial-aes.c **** 	return 0x00;
 132              		.loc 1 33 2 view .LVU20
 133 0002 FFF7FEFF 		bl	aes_indep_key
 134              	.LVL7:
  34:simpleserial-aes.c **** }
 135              		.loc 1 34 2 is_stmt 1 view .LVU21
  35:simpleserial-aes.c **** 
 136              		.loc 1 35 1 is_stmt 0 view .LVU22
 137 0006 0020     		movs	r0, #0
 138 0008 08BD     		pop	{r3, pc}
 139              		.cfi_endproc
 140              	.LFE1:
 142              		.section	.text.get_pt,"ax",%progbits
 143              		.align	1
 144              		.global	get_pt
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu softvfp
 150              	get_pt:
 151              	.LVL8:
 152              	.LFB2:
  38:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 153              		.loc 1 38 1 is_stmt 1 view -0
 154              		.cfi_startproc
 155              		@ args = 0, pretend = 0, frame = 0
 156              		@ frame_needed = 0, uses_anonymous_args = 0
  39:simpleserial-aes.c **** 
 157              		.loc 1 39 5 view .LVU24
  38:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 158              		.loc 1 38 1 is_stmt 0 view .LVU25
 159 0000 10B5     		push	{r4, lr}
 160              	.LCFI2:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 4, -8
 163              		.cfi_offset 14, -4
  38:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 164              		.loc 1 38 1 view .LVU26
 165 0002 0446     		mov	r4, r0
  39:simpleserial-aes.c **** 
 166              		.loc 1 39 5 view .LVU27
 167 0004 FFF7FEFF 		bl	aes_indep_enc_pretrigger
 168              	.LVL9:
  41:simpleserial-aes.c **** 
 169              		.loc 1 41 2 is_stmt 1 view .LVU28
 170 0008 FFF7FEFF 		bl	trigger_high
 171              	.LVL10:
  47:simpleserial-aes.c **** 	trigger_low();
 172              		.loc 1 47 2 view .LVU29
 173 000c 2046     		mov	r0, r4
 174 000e FFF7FEFF 		bl	aes_indep_enc
 175              	.LVL11:
  48:simpleserial-aes.c **** 
 176              		.loc 1 48 2 view .LVU30
 177 0012 FFF7FEFF 		bl	trigger_low
 178              	.LVL12:
  50:simpleserial-aes.c **** 
 179              		.loc 1 50 5 view .LVU31
 180 0016 2046     		mov	r0, r4
 181 0018 FFF7FEFF 		bl	aes_indep_enc_posttrigger
 182              	.LVL13:
  52:simpleserial-aes.c **** 	return 0x00;
 183              		.loc 1 52 2 view .LVU32
 184 001c 2246     		mov	r2, r4
 185 001e 1021     		movs	r1, #16
 186 0020 7220     		movs	r0, #114
 187 0022 FFF7FEFF 		bl	simpleserial_put
 188              	.LVL14:
  53:simpleserial-aes.c **** }
 189              		.loc 1 53 2 view .LVU33
  54:simpleserial-aes.c **** 
 190              		.loc 1 54 1 is_stmt 0 view .LVU34
 191 0026 0020     		movs	r0, #0
 192 0028 10BD     		pop	{r4, pc}
  54:simpleserial-aes.c **** 
 193              		.loc 1 54 1 view .LVU35
 194              		.cfi_endproc
 195              	.LFE2:
 197              		.section	.text.enc_multi_getpt,"ax",%progbits
 198              		.align	1
 199              		.global	enc_multi_getpt
 200              		.syntax unified
 201              		.thumb
 202              		.thumb_func
 203              		.fpu softvfp
 205              	enc_multi_getpt:
 206              	.LVL15:
 207              	.LFB4:
  65:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 208              		.loc 1 65 1 is_stmt 1 view -0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 0
 211              		@ frame_needed = 0, uses_anonymous_args = 0
  66:simpleserial-aes.c **** 
 212              		.loc 1 66 5 view .LVU37
  65:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 213              		.loc 1 65 1 is_stmt 0 view .LVU38
 214 0000 70B5     		push	{r4, r5, r6, lr}
 215              	.LCFI3:
 216              		.cfi_def_cfa_offset 16
 217              		.cfi_offset 4, -16
 218              		.cfi_offset 5, -12
 219              		.cfi_offset 6, -8
 220              		.cfi_offset 14, -4
  65:simpleserial-aes.c ****     aes_indep_enc_pretrigger(pt);
 221              		.loc 1 65 1 view .LVU39
 222 0002 0446     		mov	r4, r0
  66:simpleserial-aes.c **** 
 223              		.loc 1 66 5 view .LVU40
 224 0004 FFF7FEFF 		bl	aes_indep_enc_pretrigger
 225              	.LVL16:
  68:simpleserial-aes.c ****         trigger_high();
 226              		.loc 1 68 5 is_stmt 1 view .LVU41
 227              	.LBB2:
  68:simpleserial-aes.c ****         trigger_high();
 228              		.loc 1 68 9 view .LVU42
  68:simpleserial-aes.c ****         trigger_high();
 229              		.loc 1 68 31 is_stmt 0 view .LVU43
 230 0008 0B4E     		ldr	r6, .L11
  68:simpleserial-aes.c ****         trigger_high();
 231              		.loc 1 68 22 view .LVU44
 232 000a 0025     		movs	r5, #0
 233              	.LVL17:
 234              	.L9:
  68:simpleserial-aes.c ****         trigger_high();
 235              		.loc 1 68 29 is_stmt 1 discriminator 1 view .LVU45
  68:simpleserial-aes.c ****         trigger_high();
 236              		.loc 1 68 31 is_stmt 0 discriminator 1 view .LVU46
 237 000c 3388     		ldrh	r3, [r6]
  68:simpleserial-aes.c ****         trigger_high();
 238              		.loc 1 68 5 discriminator 1 view .LVU47
 239 000e AB42     		cmp	r3, r5
 240 0010 09D8     		bhi	.L10
 241              	.LBE2:
  74:simpleserial-aes.c **** 	simpleserial_put('r', 16, pt);
 242              		.loc 1 74 5 is_stmt 1 view .LVU48
 243 0012 2046     		mov	r0, r4
 244 0014 FFF7FEFF 		bl	aes_indep_enc_posttrigger
 245              	.LVL18:
  75:simpleserial-aes.c ****     return 0;
 246              		.loc 1 75 2 view .LVU49
 247 0018 2246     		mov	r2, r4
 248 001a 1021     		movs	r1, #16
 249 001c 7220     		movs	r0, #114
 250 001e FFF7FEFF 		bl	simpleserial_put
 251              	.LVL19:
  76:simpleserial-aes.c **** }
 252              		.loc 1 76 5 view .LVU50
  77:simpleserial-aes.c **** 
 253              		.loc 1 77 1 is_stmt 0 view .LVU51
 254 0022 0020     		movs	r0, #0
 255 0024 70BD     		pop	{r4, r5, r6, pc}
 256              	.LVL20:
 257              	.L10:
 258              	.LBB3:
  69:simpleserial-aes.c ****         aes_indep_enc(pt);
 259              		.loc 1 69 9 is_stmt 1 discriminator 3 view .LVU52
 260 0026 FFF7FEFF 		bl	trigger_high
 261              	.LVL21:
  70:simpleserial-aes.c ****         trigger_low();
 262              		.loc 1 70 9 discriminator 3 view .LVU53
 263 002a 2046     		mov	r0, r4
 264 002c FFF7FEFF 		bl	aes_indep_enc
 265              	.LVL22:
  71:simpleserial-aes.c ****     }
 266              		.loc 1 71 9 discriminator 3 view .LVU54
  68:simpleserial-aes.c ****         trigger_high();
 267              		.loc 1 68 57 is_stmt 0 discriminator 3 view .LVU55
 268 0030 0135     		adds	r5, r5, #1
 269              	.LVL23:
  71:simpleserial-aes.c ****     }
 270              		.loc 1 71 9 discriminator 3 view .LVU56
 271 0032 FFF7FEFF 		bl	trigger_low
 272              	.LVL24:
  68:simpleserial-aes.c ****         trigger_high();
 273              		.loc 1 68 56 is_stmt 1 discriminator 3 view .LVU57
  68:simpleserial-aes.c ****         trigger_high();
 274              		.loc 1 68 56 is_stmt 0 discriminator 3 view .LVU58
 275 0036 E9E7     		b	.L9
 276              	.L12:
 277              		.align	2
 278              	.L11:
 279 0038 00000000 		.word	.LANCHOR0
 280              	.LBE3:
 281              		.cfi_endproc
 282              	.LFE4:
 284              		.section	.rodata.str1.1,"aMS",%progbits,1
 285              	.LC0:
 286 0000 2B7E1516 		.ascii	"+~\025\026(\256\322\246\253\367\025\210\011\317O<\000"
 286      28AED2A6 
 286      ABF71588 
 286      09CF4F3C 
 286      00
 287              		.section	.text.startup.main,"ax",%progbits
 288              		.align	1
 289              		.global	main
 290              		.syntax unified
 291              		.thumb
 292              		.thumb_func
 293              		.fpu softvfp
 295              	main:
 296              	.LFB6:
  87:simpleserial-aes.c **** 
  88:simpleserial-aes.c **** #if SS_VER == SS_VER_2_1
  89:simpleserial-aes.c **** uint8_t aes(uint8_t cmd, uint8_t scmd, uint8_t len, uint8_t *buf)
  90:simpleserial-aes.c **** {
  91:simpleserial-aes.c ****     uint8_t req_len = 0;
  92:simpleserial-aes.c ****     uint8_t err = 0;
  93:simpleserial-aes.c ****     uint8_t mask_len = 0;
  94:simpleserial-aes.c ****     if (scmd & 0x04) {
  95:simpleserial-aes.c ****         // Mask has variable length. First byte encodes the length
  96:simpleserial-aes.c ****         mask_len = buf[req_len];
  97:simpleserial-aes.c ****         req_len += 1 + mask_len;
  98:simpleserial-aes.c ****         if (req_len > len) {
  99:simpleserial-aes.c ****             return SS_ERR_LEN;
 100:simpleserial-aes.c ****         }
 101:simpleserial-aes.c ****         err = get_mask(buf + req_len - mask_len, mask_len);
 102:simpleserial-aes.c ****         if (err)
 103:simpleserial-aes.c ****             return err;
 104:simpleserial-aes.c ****     }
 105:simpleserial-aes.c **** 
 106:simpleserial-aes.c ****     if (scmd & 0x02) {
 107:simpleserial-aes.c ****         req_len += 16;
 108:simpleserial-aes.c ****         if (req_len > len) {
 109:simpleserial-aes.c ****             return SS_ERR_LEN;
 110:simpleserial-aes.c ****         }
 111:simpleserial-aes.c ****         err = get_key(buf + req_len - 16, 16);
 112:simpleserial-aes.c ****         if (err)
 113:simpleserial-aes.c ****             return err;
 114:simpleserial-aes.c ****     }
 115:simpleserial-aes.c ****     if (scmd & 0x01) {
 116:simpleserial-aes.c ****         req_len += 16;
 117:simpleserial-aes.c ****         if (req_len > len) {
 118:simpleserial-aes.c ****             return SS_ERR_LEN;
 119:simpleserial-aes.c ****         }
 120:simpleserial-aes.c ****         err = get_pt(buf + req_len - 16, 16);
 121:simpleserial-aes.c ****         if (err)
 122:simpleserial-aes.c ****             return err;
 123:simpleserial-aes.c ****     }
 124:simpleserial-aes.c **** 
 125:simpleserial-aes.c ****     if (len != req_len) {
 126:simpleserial-aes.c ****         return SS_ERR_LEN;
 127:simpleserial-aes.c ****     }
 128:simpleserial-aes.c **** 
 129:simpleserial-aes.c ****     return 0x00;
 130:simpleserial-aes.c **** 
 131:simpleserial-aes.c **** }
 132:simpleserial-aes.c **** #endif
 133:simpleserial-aes.c **** 
 134:simpleserial-aes.c **** int main(void)
 135:simpleserial-aes.c **** {
 297              		.loc 1 135 1 is_stmt 1 view -0
 298              		.cfi_startproc
 299              		@ Volatile: function does not return.
 300              		@ args = 0, pretend = 0, frame = 16
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 136:simpleserial-aes.c **** 	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 302              		.loc 1 136 2 view .LVU60
 135:simpleserial-aes.c **** 	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 303              		.loc 1 135 1 is_stmt 0 view .LVU61
 304 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 305              	.LCFI4:
 306              		.cfi_def_cfa_offset 24
 307              		.cfi_offset 14, -4
 308              		.loc 1 136 10 view .LVU62
 309 0002 1E4B     		ldr	r3, .L17
 310 0004 6A46     		mov	r2, sp
 311 0006 03F11006 		add	r6, r3, #16
 312 000a 1546     		mov	r5, r2
 313              	.L14:
 314 000c 1868     		ldr	r0, [r3]	@ unaligned
 315 000e 5968     		ldr	r1, [r3, #4]	@ unaligned
 316 0010 1446     		mov	r4, r2
 317 0012 03C4     		stmia	r4!, {r0, r1}
 318 0014 0833     		adds	r3, r3, #8
 319 0016 B342     		cmp	r3, r6
 320 0018 2246     		mov	r2, r4
 321 001a F7D1     		bne	.L14
 137:simpleserial-aes.c **** 
 138:simpleserial-aes.c ****     platform_init();
 322              		.loc 1 138 5 is_stmt 1 view .LVU63
 323 001c FFF7FEFF 		bl	platform_init
 324              	.LVL25:
 139:simpleserial-aes.c ****     init_uart();
 325              		.loc 1 139 5 view .LVU64
 326 0020 FFF7FEFF 		bl	init_uart
 327              	.LVL26:
 140:simpleserial-aes.c ****     trigger_setup();
 328              		.loc 1 140 5 view .LVU65
 329 0024 FFF7FEFF 		bl	trigger_setup
 330              	.LVL27:
 141:simpleserial-aes.c **** 
 142:simpleserial-aes.c **** 	aes_indep_init();
 331              		.loc 1 142 2 view .LVU66
 332 0028 FFF7FEFF 		bl	aes_indep_init
 333              	.LVL28:
 143:simpleserial-aes.c **** 	aes_indep_key(tmp);
 334              		.loc 1 143 2 view .LVU67
 335 002c 2846     		mov	r0, r5
 336 002e FFF7FEFF 		bl	aes_indep_key
 337              	.LVL29:
 144:simpleserial-aes.c **** 
 145:simpleserial-aes.c ****     /* Uncomment this to get a HELLO message for debug */
 146:simpleserial-aes.c **** 
 147:simpleserial-aes.c ****     // putch('h');
 148:simpleserial-aes.c ****     // putch('e');
 149:simpleserial-aes.c ****     // putch('l');
 150:simpleserial-aes.c ****     // putch('l');
 151:simpleserial-aes.c ****     // putch('o');
 152:simpleserial-aes.c ****     // putch('\n');
 153:simpleserial-aes.c **** 
 154:simpleserial-aes.c **** 	simpleserial_init();
 338              		.loc 1 154 2 view .LVU68
 339 0032 FFF7FEFF 		bl	simpleserial_init
 340              	.LVL30:
 155:simpleserial-aes.c ****     #if SS_VER == SS_VER_2_1
 156:simpleserial-aes.c ****     simpleserial_addcmd(0x01, 16, aes);
 157:simpleserial-aes.c ****     #else
 158:simpleserial-aes.c ****     simpleserial_addcmd('k', 16, get_key);
 341              		.loc 1 158 5 view .LVU69
 342 0036 124A     		ldr	r2, .L17+4
 343 0038 1021     		movs	r1, #16
 344 003a 6B20     		movs	r0, #107
 345 003c FFF7FEFF 		bl	simpleserial_addcmd
 346              	.LVL31:
 159:simpleserial-aes.c ****     simpleserial_addcmd('p', 16,  get_pt);
 347              		.loc 1 159 5 view .LVU70
 348 0040 104A     		ldr	r2, .L17+8
 349 0042 1021     		movs	r1, #16
 350 0044 7020     		movs	r0, #112
 351 0046 FFF7FEFF 		bl	simpleserial_addcmd
 352              	.LVL32:
 160:simpleserial-aes.c ****     simpleserial_addcmd('x',  0,   reset);
 353              		.loc 1 160 5 view .LVU71
 354 004a 0F4A     		ldr	r2, .L17+12
 355 004c 0021     		movs	r1, #0
 356 004e 7820     		movs	r0, #120
 357 0050 FFF7FEFF 		bl	simpleserial_addcmd
 358              	.LVL33:
 161:simpleserial-aes.c ****     simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 359              		.loc 1 161 5 view .LVU72
 360 0054 0D4A     		ldr	r2, .L17+16
 361 0056 0123     		movs	r3, #1
 362 0058 1221     		movs	r1, #18
 363 005a 6D20     		movs	r0, #109
 364 005c FFF7FEFF 		bl	simpleserial_addcmd_flags
 365              	.LVL34:
 162:simpleserial-aes.c ****     simpleserial_addcmd('s', 2, enc_multi_setnum);
 366              		.loc 1 162 5 view .LVU73
 367 0060 0B4A     		ldr	r2, .L17+20
 368 0062 0221     		movs	r1, #2
 369 0064 7320     		movs	r0, #115
 370 0066 FFF7FEFF 		bl	simpleserial_addcmd
 371              	.LVL35:
 163:simpleserial-aes.c ****     simpleserial_addcmd('f', 16, enc_multi_getpt);
 372              		.loc 1 163 5 view .LVU74
 373 006a 0A4A     		ldr	r2, .L17+24
 374 006c 1021     		movs	r1, #16
 375 006e 6620     		movs	r0, #102
 376 0070 FFF7FEFF 		bl	simpleserial_addcmd
 377              	.LVL36:
 378              	.L15:
 164:simpleserial-aes.c ****     #endif
 165:simpleserial-aes.c ****     while(1)
 379              		.loc 1 165 5 discriminator 1 view .LVU75
 166:simpleserial-aes.c ****         simpleserial_get();
 380              		.loc 1 166 9 discriminator 1 view .LVU76
 381 0074 FFF7FEFF 		bl	simpleserial_get
 382              	.LVL37:
 165:simpleserial-aes.c ****         simpleserial_get();
 383              		.loc 1 165 10 discriminator 1 view .LVU77
 384 0078 FCE7     		b	.L15
 385              	.L18:
 386 007a 00BF     		.align	2
 387              	.L17:
 388 007c 00000000 		.word	.LC0
 389 0080 00000000 		.word	get_key
 390 0084 00000000 		.word	get_pt
 391 0088 00000000 		.word	reset
 392 008c 00000000 		.word	get_mask
 393 0090 00000000 		.word	enc_multi_setnum
 394 0094 00000000 		.word	enc_multi_getpt
 395              		.cfi_endproc
 396              	.LFE6:
 398              		.data
 399              		.align	1
 400              		.set	.LANCHOR0,. + 0
 403              	num_encryption_rounds:
 404 0000 0A00     		.short	10
 405              		.text
 406              	.Letext0:
 407              		.file 2 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 408              		.file 3 ".././hal/hal.h"
 409              		.file 4 ".././hal/stm32f3/stm32f3_hal.h"
 410              		.file 5 ".././crypto3/aes-independant.h"
 411              		.file 6 ".././simpleserial/simpleserial.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 simpleserial-aes.c
     /tmp/cclqzv0z.s:16     .text.reset:0000000000000000 $t
     /tmp/cclqzv0z.s:24     .text.reset:0000000000000000 reset
     /tmp/cclqzv0z.s:43     .text.enc_multi_setnum:0000000000000000 $t
     /tmp/cclqzv0z.s:50     .text.enc_multi_setnum:0000000000000000 enc_multi_setnum
     /tmp/cclqzv0z.s:74     .text.enc_multi_setnum:000000000000000c $d
     /tmp/cclqzv0z.s:79     .text.get_mask:0000000000000000 $t
     /tmp/cclqzv0z.s:86     .text.get_mask:0000000000000000 get_mask
     /tmp/cclqzv0z.s:111    .text.get_key:0000000000000000 $t
     /tmp/cclqzv0z.s:118    .text.get_key:0000000000000000 get_key
     /tmp/cclqzv0z.s:143    .text.get_pt:0000000000000000 $t
     /tmp/cclqzv0z.s:150    .text.get_pt:0000000000000000 get_pt
     /tmp/cclqzv0z.s:198    .text.enc_multi_getpt:0000000000000000 $t
     /tmp/cclqzv0z.s:205    .text.enc_multi_getpt:0000000000000000 enc_multi_getpt
     /tmp/cclqzv0z.s:279    .text.enc_multi_getpt:0000000000000038 $d
     /tmp/cclqzv0z.s:288    .text.startup.main:0000000000000000 $t
     /tmp/cclqzv0z.s:295    .text.startup.main:0000000000000000 main
     /tmp/cclqzv0z.s:388    .text.startup.main:000000000000007c $d
     /tmp/cclqzv0z.s:399    .data:0000000000000000 $d
     /tmp/cclqzv0z.s:403    .data:0000000000000000 num_encryption_rounds

UNDEFINED SYMBOLS
aes_indep_mask
aes_indep_key
aes_indep_enc_pretrigger
trigger_high
aes_indep_enc
trigger_low
aes_indep_enc_posttrigger
simpleserial_put
platform_init
init_uart
trigger_setup
aes_indep_init
simpleserial_init
simpleserial_addcmd
simpleserial_addcmd_flags
simpleserial_get
