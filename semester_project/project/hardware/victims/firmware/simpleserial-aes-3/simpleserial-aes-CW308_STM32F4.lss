
simpleserial-aes-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a64  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001bec  08001bec  00011bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c14  08001c14  00020a60  2**0
                  CONTENTS
  4 .ARM          00000000  08001c14  08001c14  00020a60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c14  08001c14  00020a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08001c14  08001c14  00011c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c1c  08001c1c  00011c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a60  20000000  08001c20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000a60  08002680  00020a60  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20000d24  08002680  00020d24  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020a60  2**0
                  CONTENTS, READONLY
 12 .comment      00000033  00000000  00000000  00020a8a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bf04  00000000  00000000  00020abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c57  00000000  00000000  0002c9c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000046fb  00000000  00000000  0002f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004c0  00000000  00000000  00033d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000720  00000000  00000000  000341d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004c50  00000000  00000000  000348f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00002009  00000000  00000000  00039543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000abc  00000000  00000000  0003b54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  0003c008  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000034  00000000  00000000  0003c14c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	4803      	ldr	r0, [pc, #12]	; (8000198 <deregister_tm_clones+0x10>)
 800018a:	4b04      	ldr	r3, [pc, #16]	; (800019c <deregister_tm_clones+0x14>)
 800018c:	4283      	cmp	r3, r0
 800018e:	d002      	beq.n	8000196 <deregister_tm_clones+0xe>
 8000190:	4b03      	ldr	r3, [pc, #12]	; (80001a0 <deregister_tm_clones+0x18>)
 8000192:	b103      	cbz	r3, 8000196 <deregister_tm_clones+0xe>
 8000194:	4718      	bx	r3
 8000196:	4770      	bx	lr
 8000198:	20000a60 	.word	0x20000a60
 800019c:	20000a60 	.word	0x20000a60
 80001a0:	00000000 	.word	0x00000000

080001a4 <register_tm_clones>:
 80001a4:	4805      	ldr	r0, [pc, #20]	; (80001bc <register_tm_clones+0x18>)
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <register_tm_clones+0x1c>)
 80001a8:	1a0b      	subs	r3, r1, r0
 80001aa:	0fd9      	lsrs	r1, r3, #31
 80001ac:	eb01 01a3 	add.w	r1, r1, r3, asr #2
 80001b0:	1049      	asrs	r1, r1, #1
 80001b2:	d002      	beq.n	80001ba <register_tm_clones+0x16>
 80001b4:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <register_tm_clones+0x20>)
 80001b6:	b103      	cbz	r3, 80001ba <register_tm_clones+0x16>
 80001b8:	4718      	bx	r3
 80001ba:	4770      	bx	lr
 80001bc:	20000a60 	.word	0x20000a60
 80001c0:	20000a60 	.word	0x20000a60
 80001c4:	00000000 	.word	0x00000000

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c06      	ldr	r4, [pc, #24]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b943      	cbnz	r3, 80001e2 <__do_global_dtors_aux+0x1a>
 80001d0:	f7ff ffda 	bl	8000188 <deregister_tm_clones>
 80001d4:	4b04      	ldr	r3, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	b113      	cbz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d8:	4804      	ldr	r0, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x24>)
 80001da:	f3af 8000 	nop.w
 80001de:	2301      	movs	r3, #1
 80001e0:	7023      	strb	r3, [r4, #0]
 80001e2:	bd10      	pop	{r4, pc}
 80001e4:	20000a60 	.word	0x20000a60
 80001e8:	00000000 	.word	0x00000000
 80001ec:	08001bd4 	.word	0x08001bd4

080001f0 <frame_dummy>:
 80001f0:	b508      	push	{r3, lr}
 80001f2:	4b04      	ldr	r3, [pc, #16]	; (8000204 <frame_dummy+0x14>)
 80001f4:	b11b      	cbz	r3, 80001fe <frame_dummy+0xe>
 80001f6:	4904      	ldr	r1, [pc, #16]	; (8000208 <frame_dummy+0x18>)
 80001f8:	4804      	ldr	r0, [pc, #16]	; (800020c <frame_dummy+0x1c>)
 80001fa:	f3af 8000 	nop.w
 80001fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000202:	e7cf      	b.n	80001a4 <register_tm_clones>
 8000204:	00000000 	.word	0x00000000
 8000208:	20000a64 	.word	0x20000a64
 800020c:	08001bd4 	.word	0x08001bd4

08000210 <atexit>:
 8000210:	2300      	movs	r3, #0
 8000212:	4601      	mov	r1, r0
 8000214:	461a      	mov	r2, r3
 8000216:	4618      	mov	r0, r3
 8000218:	f000 bb10 	b.w	800083c <__register_exitproc>

0800021c <__errno>:
 800021c:	4b01      	ldr	r3, [pc, #4]	; (8000224 <__errno+0x8>)
 800021e:	6818      	ldr	r0, [r3, #0]
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	20000220 	.word	0x20000220

08000228 <__libc_fini_array>:
 8000228:	b538      	push	{r3, r4, r5, lr}
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <__libc_fini_array+0x24>)
 800022c:	4d08      	ldr	r5, [pc, #32]	; (8000250 <__libc_fini_array+0x28>)
 800022e:	1b5b      	subs	r3, r3, r5
 8000230:	109c      	asrs	r4, r3, #2
 8000232:	d007      	beq.n	8000244 <__libc_fini_array+0x1c>
 8000234:	3b04      	subs	r3, #4
 8000236:	441d      	add	r5, r3
 8000238:	3c01      	subs	r4, #1
 800023a:	f855 3904 	ldr.w	r3, [r5], #-4
 800023e:	4798      	blx	r3
 8000240:	2c00      	cmp	r4, #0
 8000242:	d1f9      	bne.n	8000238 <__libc_fini_array+0x10>
 8000244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000248:	f001 bcca 	b.w	8001be0 <_fini>
 800024c:	08001c20 	.word	0x08001c20
 8000250:	08001c1c 	.word	0x08001c1c

08000254 <__libc_init_array>:
 8000254:	b570      	push	{r4, r5, r6, lr}
 8000256:	4e0d      	ldr	r6, [pc, #52]	; (800028c <__libc_init_array+0x38>)
 8000258:	4d0d      	ldr	r5, [pc, #52]	; (8000290 <__libc_init_array+0x3c>)
 800025a:	1b76      	subs	r6, r6, r5
 800025c:	10b6      	asrs	r6, r6, #2
 800025e:	d006      	beq.n	800026e <__libc_init_array+0x1a>
 8000260:	2400      	movs	r4, #0
 8000262:	f855 3b04 	ldr.w	r3, [r5], #4
 8000266:	3401      	adds	r4, #1
 8000268:	4798      	blx	r3
 800026a:	42a6      	cmp	r6, r4
 800026c:	d1f9      	bne.n	8000262 <__libc_init_array+0xe>
 800026e:	4e09      	ldr	r6, [pc, #36]	; (8000294 <__libc_init_array+0x40>)
 8000270:	4d09      	ldr	r5, [pc, #36]	; (8000298 <__libc_init_array+0x44>)
 8000272:	1b76      	subs	r6, r6, r5
 8000274:	f001 fcae 	bl	8001bd4 <_init>
 8000278:	10b6      	asrs	r6, r6, #2
 800027a:	d006      	beq.n	800028a <__libc_init_array+0x36>
 800027c:	2400      	movs	r4, #0
 800027e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000282:	3401      	adds	r4, #1
 8000284:	4798      	blx	r3
 8000286:	42a6      	cmp	r6, r4
 8000288:	d1f9      	bne.n	800027e <__libc_init_array+0x2a>
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	08001c14 	.word	0x08001c14
 8000290:	08001c14 	.word	0x08001c14
 8000294:	08001c1c 	.word	0x08001c1c
 8000298:	08001c14 	.word	0x08001c14

0800029c <malloc>:
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <malloc+0xc>)
 800029e:	4601      	mov	r1, r0
 80002a0:	6818      	ldr	r0, [r3, #0]
 80002a2:	f000 b80b 	b.w	80002bc <_malloc_r>
 80002a6:	bf00      	nop
 80002a8:	20000220 	.word	0x20000220

080002ac <free>:
 80002ac:	4b02      	ldr	r3, [pc, #8]	; (80002b8 <free+0xc>)
 80002ae:	4601      	mov	r1, r0
 80002b0:	6818      	ldr	r0, [r3, #0]
 80002b2:	f000 bb47 	b.w	8000944 <_free_r>
 80002b6:	bf00      	nop
 80002b8:	20000220 	.word	0x20000220

080002bc <_malloc_r>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	f101 060b 	add.w	r6, r1, #11
 80002c4:	2e16      	cmp	r6, #22
 80002c6:	b083      	sub	sp, #12
 80002c8:	4604      	mov	r4, r0
 80002ca:	d824      	bhi.n	8000316 <_malloc_r+0x5a>
 80002cc:	2910      	cmp	r1, #16
 80002ce:	f200 80ba 	bhi.w	8000446 <_malloc_r+0x18a>
 80002d2:	f000 fa9d 	bl	8000810 <__malloc_lock>
 80002d6:	2610      	movs	r6, #16
 80002d8:	2218      	movs	r2, #24
 80002da:	2002      	movs	r0, #2
 80002dc:	4fb7      	ldr	r7, [pc, #732]	; (80005bc <_malloc_r+0x300>)
 80002de:	443a      	add	r2, r7
 80002e0:	f1a2 0108 	sub.w	r1, r2, #8
 80002e4:	6853      	ldr	r3, [r2, #4]
 80002e6:	428b      	cmp	r3, r1
 80002e8:	f000 80ba 	beq.w	8000460 <_malloc_r+0x1a4>
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	68d9      	ldr	r1, [r3, #12]
 80002f0:	f022 0203 	bic.w	r2, r2, #3
 80002f4:	441a      	add	r2, r3
 80002f6:	689d      	ldr	r5, [r3, #8]
 80002f8:	60e9      	str	r1, [r5, #12]
 80002fa:	608d      	str	r5, [r1, #8]
 80002fc:	6851      	ldr	r1, [r2, #4]
 80002fe:	f041 0101 	orr.w	r1, r1, #1
 8000302:	4620      	mov	r0, r4
 8000304:	6051      	str	r1, [r2, #4]
 8000306:	f103 0508 	add.w	r5, r3, #8
 800030a:	f000 fa83 	bl	8000814 <__malloc_unlock>
 800030e:	4628      	mov	r0, r5
 8000310:	b003      	add	sp, #12
 8000312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000316:	f036 0607 	bics.w	r6, r6, #7
 800031a:	f100 8094 	bmi.w	8000446 <_malloc_r+0x18a>
 800031e:	42b1      	cmp	r1, r6
 8000320:	f200 8091 	bhi.w	8000446 <_malloc_r+0x18a>
 8000324:	f000 fa74 	bl	8000810 <__malloc_lock>
 8000328:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 800032c:	f0c0 8196 	bcc.w	800065c <_malloc_r+0x3a0>
 8000330:	0a73      	lsrs	r3, r6, #9
 8000332:	f000 808f 	beq.w	8000454 <_malloc_r+0x198>
 8000336:	2b04      	cmp	r3, #4
 8000338:	f200 816b 	bhi.w	8000612 <_malloc_r+0x356>
 800033c:	09b3      	lsrs	r3, r6, #6
 800033e:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000342:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8000346:	00c3      	lsls	r3, r0, #3
 8000348:	4f9c      	ldr	r7, [pc, #624]	; (80005bc <_malloc_r+0x300>)
 800034a:	443b      	add	r3, r7
 800034c:	f1a3 0508 	sub.w	r5, r3, #8
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	429d      	cmp	r5, r3
 8000354:	d106      	bne.n	8000364 <_malloc_r+0xa8>
 8000356:	e00c      	b.n	8000372 <_malloc_r+0xb6>
 8000358:	2900      	cmp	r1, #0
 800035a:	f280 812b 	bge.w	80005b4 <_malloc_r+0x2f8>
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	429d      	cmp	r5, r3
 8000362:	d006      	beq.n	8000372 <_malloc_r+0xb6>
 8000364:	685a      	ldr	r2, [r3, #4]
 8000366:	f022 0203 	bic.w	r2, r2, #3
 800036a:	1b91      	subs	r1, r2, r6
 800036c:	290f      	cmp	r1, #15
 800036e:	ddf3      	ble.n	8000358 <_malloc_r+0x9c>
 8000370:	4660      	mov	r0, ip
 8000372:	693d      	ldr	r5, [r7, #16]
 8000374:	f8df c248 	ldr.w	ip, [pc, #584]	; 80005c0 <_malloc_r+0x304>
 8000378:	4565      	cmp	r5, ip
 800037a:	d07c      	beq.n	8000476 <_malloc_r+0x1ba>
 800037c:	686a      	ldr	r2, [r5, #4]
 800037e:	f022 0203 	bic.w	r2, r2, #3
 8000382:	1b93      	subs	r3, r2, r6
 8000384:	2b0f      	cmp	r3, #15
 8000386:	f300 8177 	bgt.w	8000678 <_malloc_r+0x3bc>
 800038a:	2b00      	cmp	r3, #0
 800038c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8000390:	f280 8168 	bge.w	8000664 <_malloc_r+0x3a8>
 8000394:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000398:	f080 8116 	bcs.w	80005c8 <_malloc_r+0x30c>
 800039c:	08d3      	lsrs	r3, r2, #3
 800039e:	6879      	ldr	r1, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 80003a6:	2201      	movs	r2, #1
 80003a8:	fa02 f20e 	lsl.w	r2, r2, lr
 80003ac:	430a      	orrs	r2, r1
 80003ae:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 80003b2:	f8c5 e008 	str.w	lr, [r5, #8]
 80003b6:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 80003ba:	3908      	subs	r1, #8
 80003bc:	60e9      	str	r1, [r5, #12]
 80003be:	607a      	str	r2, [r7, #4]
 80003c0:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 80003c4:	f8ce 500c 	str.w	r5, [lr, #12]
 80003c8:	1083      	asrs	r3, r0, #2
 80003ca:	2101      	movs	r1, #1
 80003cc:	4099      	lsls	r1, r3
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d857      	bhi.n	8000482 <_malloc_r+0x1c6>
 80003d2:	4211      	tst	r1, r2
 80003d4:	d106      	bne.n	80003e4 <_malloc_r+0x128>
 80003d6:	f020 0003 	bic.w	r0, r0, #3
 80003da:	0049      	lsls	r1, r1, #1
 80003dc:	4211      	tst	r1, r2
 80003de:	f100 0004 	add.w	r0, r0, #4
 80003e2:	d0fa      	beq.n	80003da <_malloc_r+0x11e>
 80003e4:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80003e8:	464d      	mov	r5, r9
 80003ea:	4686      	mov	lr, r0
 80003ec:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80003f0:	4545      	cmp	r5, r8
 80003f2:	d108      	bne.n	8000406 <_malloc_r+0x14a>
 80003f4:	e119      	b.n	800062a <_malloc_r+0x36e>
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	f280 8120 	bge.w	800063c <_malloc_r+0x380>
 80003fc:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8000400:	4545      	cmp	r5, r8
 8000402:	f000 8112 	beq.w	800062a <_malloc_r+0x36e>
 8000406:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800040a:	f022 0203 	bic.w	r2, r2, #3
 800040e:	1b93      	subs	r3, r2, r6
 8000410:	2b0f      	cmp	r3, #15
 8000412:	ddf0      	ble.n	80003f6 <_malloc_r+0x13a>
 8000414:	4620      	mov	r0, r4
 8000416:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 800041a:	eb08 0106 	add.w	r1, r8, r6
 800041e:	f046 0601 	orr.w	r6, r6, #1
 8000422:	f8c8 6004 	str.w	r6, [r8, #4]
 8000426:	60ec      	str	r4, [r5, #12]
 8000428:	60a5      	str	r5, [r4, #8]
 800042a:	f043 0401 	orr.w	r4, r3, #1
 800042e:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8000432:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8000436:	604c      	str	r4, [r1, #4]
 8000438:	f848 3002 	str.w	r3, [r8, r2]
 800043c:	f000 f9ea 	bl	8000814 <__malloc_unlock>
 8000440:	f108 0508 	add.w	r5, r8, #8
 8000444:	e002      	b.n	800044c <_malloc_r+0x190>
 8000446:	230c      	movs	r3, #12
 8000448:	6023      	str	r3, [r4, #0]
 800044a:	2500      	movs	r5, #0
 800044c:	4628      	mov	r0, r5
 800044e:	b003      	add	sp, #12
 8000450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000458:	2040      	movs	r0, #64	; 0x40
 800045a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 800045e:	e773      	b.n	8000348 <_malloc_r+0x8c>
 8000460:	68d3      	ldr	r3, [r2, #12]
 8000462:	429a      	cmp	r2, r3
 8000464:	bf08      	it	eq
 8000466:	3002      	addeq	r0, #2
 8000468:	f47f af40 	bne.w	80002ec <_malloc_r+0x30>
 800046c:	693d      	ldr	r5, [r7, #16]
 800046e:	f8df c150 	ldr.w	ip, [pc, #336]	; 80005c0 <_malloc_r+0x304>
 8000472:	4565      	cmp	r5, ip
 8000474:	d182      	bne.n	800037c <_malloc_r+0xc0>
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	1083      	asrs	r3, r0, #2
 800047a:	2101      	movs	r1, #1
 800047c:	4099      	lsls	r1, r3
 800047e:	4291      	cmp	r1, r2
 8000480:	d9a7      	bls.n	80003d2 <_malloc_r+0x116>
 8000482:	68bd      	ldr	r5, [r7, #8]
 8000484:	686b      	ldr	r3, [r5, #4]
 8000486:	f023 0803 	bic.w	r8, r3, #3
 800048a:	4546      	cmp	r6, r8
 800048c:	d803      	bhi.n	8000496 <_malloc_r+0x1da>
 800048e:	eba8 0306 	sub.w	r3, r8, r6
 8000492:	2b0f      	cmp	r3, #15
 8000494:	dc7e      	bgt.n	8000594 <_malloc_r+0x2d8>
 8000496:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80005c4 <_malloc_r+0x308>
 800049a:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 800049e:	f8d9 3000 	ldr.w	r3, [r9]
 80004a2:	3201      	adds	r2, #1
 80004a4:	4433      	add	r3, r6
 80004a6:	eb05 0a08 	add.w	sl, r5, r8
 80004aa:	f000 812f 	beq.w	800070c <_malloc_r+0x450>
 80004ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80004b2:	330f      	adds	r3, #15
 80004b4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
 80004b8:	f02b 0b0f 	bic.w	fp, fp, #15
 80004bc:	4659      	mov	r1, fp
 80004be:	4620      	mov	r0, r4
 80004c0:	f000 f9aa 	bl	8000818 <_sbrk_r>
 80004c4:	1c41      	adds	r1, r0, #1
 80004c6:	4602      	mov	r2, r0
 80004c8:	f000 80ef 	beq.w	80006aa <_malloc_r+0x3ee>
 80004cc:	4582      	cmp	sl, r0
 80004ce:	f200 80ea 	bhi.w	80006a6 <_malloc_r+0x3ea>
 80004d2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80004d6:	4459      	add	r1, fp
 80004d8:	f8c9 1004 	str.w	r1, [r9, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	f000 814b 	beq.w	8000778 <_malloc_r+0x4bc>
 80004e2:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
 80004e6:	3101      	adds	r1, #1
 80004e8:	bf1b      	ittet	ne
 80004ea:	eba2 0a0a 	subne.w	sl, r2, sl
 80004ee:	4453      	addne	r3, sl
 80004f0:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
 80004f4:	f8c9 3004 	strne.w	r3, [r9, #4]
 80004f8:	f012 0307 	ands.w	r3, r2, #7
 80004fc:	f000 8112 	beq.w	8000724 <_malloc_r+0x468>
 8000500:	f1c3 0108 	rsb	r1, r3, #8
 8000504:	440a      	add	r2, r1
 8000506:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
 800050a:	4493      	add	fp, r2
 800050c:	3108      	adds	r1, #8
 800050e:	eba1 010b 	sub.w	r1, r1, fp
 8000512:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 8000516:	4651      	mov	r1, sl
 8000518:	4620      	mov	r0, r4
 800051a:	9201      	str	r2, [sp, #4]
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	f000 f97b 	bl	8000818 <_sbrk_r>
 8000522:	1c42      	adds	r2, r0, #1
 8000524:	e9dd 3200 	ldrd	r3, r2, [sp]
 8000528:	f000 814b 	beq.w	80007c2 <_malloc_r+0x506>
 800052c:	1a83      	subs	r3, r0, r2
 800052e:	eb03 0b0a 	add.w	fp, r3, sl
 8000532:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8000536:	60ba      	str	r2, [r7, #8]
 8000538:	f04b 0301 	orr.w	r3, fp, #1
 800053c:	eb0a 0100 	add.w	r1, sl, r0
 8000540:	42bd      	cmp	r5, r7
 8000542:	6053      	str	r3, [r2, #4]
 8000544:	f8c9 1004 	str.w	r1, [r9, #4]
 8000548:	f000 8122 	beq.w	8000790 <_malloc_r+0x4d4>
 800054c:	f1b8 0f0f 	cmp.w	r8, #15
 8000550:	f240 8120 	bls.w	8000794 <_malloc_r+0x4d8>
 8000554:	686b      	ldr	r3, [r5, #4]
 8000556:	f1a8 000c 	sub.w	r0, r8, #12
 800055a:	f020 0007 	bic.w	r0, r0, #7
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	4303      	orrs	r3, r0
 8000564:	606b      	str	r3, [r5, #4]
 8000566:	f04f 0c05 	mov.w	ip, #5
 800056a:	182b      	adds	r3, r5, r0
 800056c:	280f      	cmp	r0, #15
 800056e:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 8000572:	f200 812d 	bhi.w	80007d0 <_malloc_r+0x514>
 8000576:	6853      	ldr	r3, [r2, #4]
 8000578:	4615      	mov	r5, r2
 800057a:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 800057e:	428a      	cmp	r2, r1
 8000580:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
 8000584:	bf38      	it	cc
 8000586:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
 800058a:	428a      	cmp	r2, r1
 800058c:	bf38      	it	cc
 800058e:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
 8000592:	e08c      	b.n	80006ae <_malloc_r+0x3f2>
 8000594:	19aa      	adds	r2, r5, r6
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	f046 0601 	orr.w	r6, r6, #1
 800059e:	606e      	str	r6, [r5, #4]
 80005a0:	4620      	mov	r0, r4
 80005a2:	60ba      	str	r2, [r7, #8]
 80005a4:	6053      	str	r3, [r2, #4]
 80005a6:	f000 f935 	bl	8000814 <__malloc_unlock>
 80005aa:	3508      	adds	r5, #8
 80005ac:	4628      	mov	r0, r5
 80005ae:	b003      	add	sp, #12
 80005b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005b4:	68d9      	ldr	r1, [r3, #12]
 80005b6:	441a      	add	r2, r3
 80005b8:	e69d      	b.n	80002f6 <_malloc_r+0x3a>
 80005ba:	bf00      	nop
 80005bc:	20000650 	.word	0x20000650
 80005c0:	20000658 	.word	0x20000658
 80005c4:	20000cec 	.word	0x20000cec
 80005c8:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 80005cc:	ea4f 2352 	mov.w	r3, r2, lsr #9
 80005d0:	d363      	bcc.n	800069a <_malloc_r+0x3de>
 80005d2:	2b14      	cmp	r3, #20
 80005d4:	f200 80b8 	bhi.w	8000748 <_malloc_r+0x48c>
 80005d8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80005dc:	00c9      	lsls	r1, r1, #3
 80005de:	335b      	adds	r3, #91	; 0x5b
 80005e0:	eb07 0e01 	add.w	lr, r7, r1
 80005e4:	5879      	ldr	r1, [r7, r1]
 80005e6:	f1ae 0e08 	sub.w	lr, lr, #8
 80005ea:	458e      	cmp	lr, r1
 80005ec:	f000 8091 	beq.w	8000712 <_malloc_r+0x456>
 80005f0:	684b      	ldr	r3, [r1, #4]
 80005f2:	f023 0303 	bic.w	r3, r3, #3
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d902      	bls.n	8000600 <_malloc_r+0x344>
 80005fa:	6889      	ldr	r1, [r1, #8]
 80005fc:	458e      	cmp	lr, r1
 80005fe:	d1f7      	bne.n	80005f0 <_malloc_r+0x334>
 8000600:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 800060a:	f8ce 5008 	str.w	r5, [lr, #8]
 800060e:	60cd      	str	r5, [r1, #12]
 8000610:	e6da      	b.n	80003c8 <_malloc_r+0x10c>
 8000612:	2b14      	cmp	r3, #20
 8000614:	d959      	bls.n	80006ca <_malloc_r+0x40e>
 8000616:	2b54      	cmp	r3, #84	; 0x54
 8000618:	f200 809e 	bhi.w	8000758 <_malloc_r+0x49c>
 800061c:	0b33      	lsrs	r3, r6, #12
 800061e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8000622:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8000626:	00c3      	lsls	r3, r0, #3
 8000628:	e68e      	b.n	8000348 <_malloc_r+0x8c>
 800062a:	f10e 0e01 	add.w	lr, lr, #1
 800062e:	f01e 0f03 	tst.w	lr, #3
 8000632:	f105 0508 	add.w	r5, r5, #8
 8000636:	f47f aed9 	bne.w	80003ec <_malloc_r+0x130>
 800063a:	e051      	b.n	80006e0 <_malloc_r+0x424>
 800063c:	4442      	add	r2, r8
 800063e:	4645      	mov	r5, r8
 8000640:	6853      	ldr	r3, [r2, #4]
 8000642:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6053      	str	r3, [r2, #4]
 800064c:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8000650:	4620      	mov	r0, r4
 8000652:	60d9      	str	r1, [r3, #12]
 8000654:	608b      	str	r3, [r1, #8]
 8000656:	f000 f8dd 	bl	8000814 <__malloc_unlock>
 800065a:	e6f7      	b.n	800044c <_malloc_r+0x190>
 800065c:	08f0      	lsrs	r0, r6, #3
 800065e:	f106 0208 	add.w	r2, r6, #8
 8000662:	e63b      	b.n	80002dc <_malloc_r+0x20>
 8000664:	442a      	add	r2, r5
 8000666:	4620      	mov	r0, r4
 8000668:	6853      	ldr	r3, [r2, #4]
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	6053      	str	r3, [r2, #4]
 8000670:	3508      	adds	r5, #8
 8000672:	f000 f8cf 	bl	8000814 <__malloc_unlock>
 8000676:	e6e9      	b.n	800044c <_malloc_r+0x190>
 8000678:	19a9      	adds	r1, r5, r6
 800067a:	4620      	mov	r0, r4
 800067c:	f046 0601 	orr.w	r6, r6, #1
 8000680:	f043 0401 	orr.w	r4, r3, #1
 8000684:	606e      	str	r6, [r5, #4]
 8000686:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800068a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800068e:	604c      	str	r4, [r1, #4]
 8000690:	50ab      	str	r3, [r5, r2]
 8000692:	f000 f8bf 	bl	8000814 <__malloc_unlock>
 8000696:	3508      	adds	r5, #8
 8000698:	e6d8      	b.n	800044c <_malloc_r+0x190>
 800069a:	0993      	lsrs	r3, r2, #6
 800069c:	f103 0139 	add.w	r1, r3, #57	; 0x39
 80006a0:	00c9      	lsls	r1, r1, #3
 80006a2:	3338      	adds	r3, #56	; 0x38
 80006a4:	e79c      	b.n	80005e0 <_malloc_r+0x324>
 80006a6:	42bd      	cmp	r5, r7
 80006a8:	d060      	beq.n	800076c <_malloc_r+0x4b0>
 80006aa:	68bd      	ldr	r5, [r7, #8]
 80006ac:	686b      	ldr	r3, [r5, #4]
 80006ae:	f023 0b03 	bic.w	fp, r3, #3
 80006b2:	455e      	cmp	r6, fp
 80006b4:	ebab 0306 	sub.w	r3, fp, r6
 80006b8:	d802      	bhi.n	80006c0 <_malloc_r+0x404>
 80006ba:	2b0f      	cmp	r3, #15
 80006bc:	f73f af6a 	bgt.w	8000594 <_malloc_r+0x2d8>
 80006c0:	4620      	mov	r0, r4
 80006c2:	f000 f8a7 	bl	8000814 <__malloc_unlock>
 80006c6:	2500      	movs	r5, #0
 80006c8:	e6c0      	b.n	800044c <_malloc_r+0x190>
 80006ca:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 80006ce:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80006d2:	00c3      	lsls	r3, r0, #3
 80006d4:	e638      	b.n	8000348 <_malloc_r+0x8c>
 80006d6:	f859 3908 	ldr.w	r3, [r9], #-8
 80006da:	454b      	cmp	r3, r9
 80006dc:	f040 8096 	bne.w	800080c <_malloc_r+0x550>
 80006e0:	f010 0f03 	tst.w	r0, #3
 80006e4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80006e8:	d1f5      	bne.n	80006d6 <_malloc_r+0x41a>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	ea23 0301 	bic.w	r3, r3, r1
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	0049      	lsls	r1, r1, #1
 80006f4:	4299      	cmp	r1, r3
 80006f6:	f63f aec4 	bhi.w	8000482 <_malloc_r+0x1c6>
 80006fa:	b919      	cbnz	r1, 8000704 <_malloc_r+0x448>
 80006fc:	e6c1      	b.n	8000482 <_malloc_r+0x1c6>
 80006fe:	0049      	lsls	r1, r1, #1
 8000700:	f10e 0e04 	add.w	lr, lr, #4
 8000704:	4219      	tst	r1, r3
 8000706:	d0fa      	beq.n	80006fe <_malloc_r+0x442>
 8000708:	4670      	mov	r0, lr
 800070a:	e66b      	b.n	80003e4 <_malloc_r+0x128>
 800070c:	f103 0b10 	add.w	fp, r3, #16
 8000710:	e6d4      	b.n	80004bc <_malloc_r+0x200>
 8000712:	109a      	asrs	r2, r3, #2
 8000714:	f04f 0801 	mov.w	r8, #1
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	fa08 f202 	lsl.w	r2, r8, r2
 800071e:	431a      	orrs	r2, r3
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	e770      	b.n	8000606 <_malloc_r+0x34a>
 8000724:	eb02 010b 	add.w	r1, r2, fp
 8000728:	4249      	negs	r1, r1
 800072a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 800072e:	4651      	mov	r1, sl
 8000730:	4620      	mov	r0, r4
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	9200      	str	r2, [sp, #0]
 8000736:	f000 f86f 	bl	8000818 <_sbrk_r>
 800073a:	1c43      	adds	r3, r0, #1
 800073c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000740:	f47f aef4 	bne.w	800052c <_malloc_r+0x270>
 8000744:	469a      	mov	sl, r3
 8000746:	e6f4      	b.n	8000532 <_malloc_r+0x276>
 8000748:	2b54      	cmp	r3, #84	; 0x54
 800074a:	d826      	bhi.n	800079a <_malloc_r+0x4de>
 800074c:	0b13      	lsrs	r3, r2, #12
 800074e:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8000752:	00c9      	lsls	r1, r1, #3
 8000754:	336e      	adds	r3, #110	; 0x6e
 8000756:	e743      	b.n	80005e0 <_malloc_r+0x324>
 8000758:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800075c:	d826      	bhi.n	80007ac <_malloc_r+0x4f0>
 800075e:	0bf3      	lsrs	r3, r6, #15
 8000760:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000764:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8000768:	00c3      	lsls	r3, r0, #3
 800076a:	e5ed      	b.n	8000348 <_malloc_r+0x8c>
 800076c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000770:	445b      	add	r3, fp
 8000772:	f8c9 3004 	str.w	r3, [r9, #4]
 8000776:	e6b4      	b.n	80004e2 <_malloc_r+0x226>
 8000778:	f3ca 000b 	ubfx	r0, sl, #0, #12
 800077c:	2800      	cmp	r0, #0
 800077e:	f47f aeb0 	bne.w	80004e2 <_malloc_r+0x226>
 8000782:	68bd      	ldr	r5, [r7, #8]
 8000784:	eb08 030b 	add.w	r3, r8, fp
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	606b      	str	r3, [r5, #4]
 800078e:	e6f4      	b.n	800057a <_malloc_r+0x2be>
 8000790:	4615      	mov	r5, r2
 8000792:	e6f2      	b.n	800057a <_malloc_r+0x2be>
 8000794:	2301      	movs	r3, #1
 8000796:	6053      	str	r3, [r2, #4]
 8000798:	e792      	b.n	80006c0 <_malloc_r+0x404>
 800079a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800079e:	d821      	bhi.n	80007e4 <_malloc_r+0x528>
 80007a0:	0bd3      	lsrs	r3, r2, #15
 80007a2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80007a6:	00c9      	lsls	r1, r1, #3
 80007a8:	3377      	adds	r3, #119	; 0x77
 80007aa:	e719      	b.n	80005e0 <_malloc_r+0x324>
 80007ac:	f240 5254 	movw	r2, #1364	; 0x554
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d821      	bhi.n	80007f8 <_malloc_r+0x53c>
 80007b4:	0cb3      	lsrs	r3, r6, #18
 80007b6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 80007ba:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 80007be:	00c3      	lsls	r3, r0, #3
 80007c0:	e5c2      	b.n	8000348 <_malloc_r+0x8c>
 80007c2:	3b08      	subs	r3, #8
 80007c4:	449b      	add	fp, r3
 80007c6:	ebab 0b02 	sub.w	fp, fp, r2
 80007ca:	f04f 0a00 	mov.w	sl, #0
 80007ce:	e6b0      	b.n	8000532 <_malloc_r+0x276>
 80007d0:	f105 0108 	add.w	r1, r5, #8
 80007d4:	4620      	mov	r0, r4
 80007d6:	f000 f8b5 	bl	8000944 <_free_r>
 80007da:	68bd      	ldr	r5, [r7, #8]
 80007dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80007e0:	686b      	ldr	r3, [r5, #4]
 80007e2:	e6ca      	b.n	800057a <_malloc_r+0x2be>
 80007e4:	f240 5154 	movw	r1, #1364	; 0x554
 80007e8:	428b      	cmp	r3, r1
 80007ea:	d80b      	bhi.n	8000804 <_malloc_r+0x548>
 80007ec:	0c93      	lsrs	r3, r2, #18
 80007ee:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 80007f2:	00c9      	lsls	r1, r1, #3
 80007f4:	337c      	adds	r3, #124	; 0x7c
 80007f6:	e6f3      	b.n	80005e0 <_malloc_r+0x324>
 80007f8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80007fc:	207f      	movs	r0, #127	; 0x7f
 80007fe:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8000802:	e5a1      	b.n	8000348 <_malloc_r+0x8c>
 8000804:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000808:	237e      	movs	r3, #126	; 0x7e
 800080a:	e6e9      	b.n	80005e0 <_malloc_r+0x324>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	e770      	b.n	80006f2 <_malloc_r+0x436>

08000810 <__malloc_lock>:
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop

08000814 <__malloc_unlock>:
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop

08000818 <_sbrk_r>:
 8000818:	b538      	push	{r3, r4, r5, lr}
 800081a:	4d07      	ldr	r5, [pc, #28]	; (8000838 <_sbrk_r+0x20>)
 800081c:	2200      	movs	r2, #0
 800081e:	4604      	mov	r4, r0
 8000820:	4608      	mov	r0, r1
 8000822:	602a      	str	r2, [r5, #0]
 8000824:	f001 f830 	bl	8001888 <_sbrk>
 8000828:	1c43      	adds	r3, r0, #1
 800082a:	d000      	beq.n	800082e <_sbrk_r+0x16>
 800082c:	bd38      	pop	{r3, r4, r5, pc}
 800082e:	682b      	ldr	r3, [r5, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d0fb      	beq.n	800082c <_sbrk_r+0x14>
 8000834:	6023      	str	r3, [r4, #0]
 8000836:	bd38      	pop	{r3, r4, r5, pc}
 8000838:	20000d20 	.word	0x20000d20

0800083c <__register_exitproc>:
 800083c:	b470      	push	{r4, r5, r6}
 800083e:	4c18      	ldr	r4, [pc, #96]	; (80008a0 <__register_exitproc+0x64>)
 8000840:	6825      	ldr	r5, [r4, #0]
 8000842:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8000846:	b31c      	cbz	r4, 8000890 <__register_exitproc+0x54>
 8000848:	6865      	ldr	r5, [r4, #4]
 800084a:	2d1f      	cmp	r5, #31
 800084c:	dc25      	bgt.n	800089a <__register_exitproc+0x5e>
 800084e:	b938      	cbnz	r0, 8000860 <__register_exitproc+0x24>
 8000850:	1cab      	adds	r3, r5, #2
 8000852:	3501      	adds	r5, #1
 8000854:	6065      	str	r5, [r4, #4]
 8000856:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 800085a:	2000      	movs	r0, #0
 800085c:	bc70      	pop	{r4, r5, r6}
 800085e:	4770      	bx	lr
 8000860:	eb04 0c85 	add.w	ip, r4, r5, lsl #2
 8000864:	2802      	cmp	r0, #2
 8000866:	f8cc 2088 	str.w	r2, [ip, #136]	; 0x88
 800086a:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 800086e:	f04f 0201 	mov.w	r2, #1
 8000872:	fa02 f205 	lsl.w	r2, r2, r5
 8000876:	ea46 0602 	orr.w	r6, r6, r2
 800087a:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 800087e:	f8cc 3108 	str.w	r3, [ip, #264]	; 0x108
 8000882:	d1e5      	bne.n	8000850 <__register_exitproc+0x14>
 8000884:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
 8000888:	4313      	orrs	r3, r2
 800088a:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800088e:	e7df      	b.n	8000850 <__register_exitproc+0x14>
 8000890:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000894:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000898:	e7d6      	b.n	8000848 <__register_exitproc+0xc>
 800089a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800089e:	e7dd      	b.n	800085c <__register_exitproc+0x20>
 80008a0:	08001bfc 	.word	0x08001bfc

080008a4 <_malloc_trim_r>:
 80008a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a6:	4f24      	ldr	r7, [pc, #144]	; (8000938 <_malloc_trim_r+0x94>)
 80008a8:	460c      	mov	r4, r1
 80008aa:	4606      	mov	r6, r0
 80008ac:	f7ff ffb0 	bl	8000810 <__malloc_lock>
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	6855      	ldr	r5, [r2, #4]
 80008b4:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 80008b8:	330f      	adds	r3, #15
 80008ba:	f025 0503 	bic.w	r5, r5, #3
 80008be:	442b      	add	r3, r5
 80008c0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80008c4:	f023 030f 	bic.w	r3, r3, #15
 80008c8:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 80008cc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80008d0:	db07      	blt.n	80008e2 <_malloc_trim_r+0x3e>
 80008d2:	2100      	movs	r1, #0
 80008d4:	4630      	mov	r0, r6
 80008d6:	f7ff ff9f 	bl	8000818 <_sbrk_r>
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	442b      	add	r3, r5
 80008de:	4298      	cmp	r0, r3
 80008e0:	d004      	beq.n	80008ec <_malloc_trim_r+0x48>
 80008e2:	4630      	mov	r0, r6
 80008e4:	f7ff ff96 	bl	8000814 <__malloc_unlock>
 80008e8:	2000      	movs	r0, #0
 80008ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ec:	4261      	negs	r1, r4
 80008ee:	4630      	mov	r0, r6
 80008f0:	f7ff ff92 	bl	8000818 <_sbrk_r>
 80008f4:	3001      	adds	r0, #1
 80008f6:	d00d      	beq.n	8000914 <_malloc_trim_r+0x70>
 80008f8:	4a10      	ldr	r2, [pc, #64]	; (800093c <_malloc_trim_r+0x98>)
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	1b2d      	subs	r5, r5, r4
 80008fe:	f045 0501 	orr.w	r5, r5, #1
 8000902:	605d      	str	r5, [r3, #4]
 8000904:	6813      	ldr	r3, [r2, #0]
 8000906:	4630      	mov	r0, r6
 8000908:	1b1b      	subs	r3, r3, r4
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	f7ff ff82 	bl	8000814 <__malloc_unlock>
 8000910:	2001      	movs	r0, #1
 8000912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000914:	2100      	movs	r1, #0
 8000916:	4630      	mov	r0, r6
 8000918:	f7ff ff7e 	bl	8000818 <_sbrk_r>
 800091c:	68ba      	ldr	r2, [r7, #8]
 800091e:	1a83      	subs	r3, r0, r2
 8000920:	2b0f      	cmp	r3, #15
 8000922:	ddde      	ble.n	80008e2 <_malloc_trim_r+0x3e>
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6053      	str	r3, [r2, #4]
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <_malloc_trim_r+0x9c>)
 800092c:	4903      	ldr	r1, [pc, #12]	; (800093c <_malloc_trim_r+0x98>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1ac0      	subs	r0, r0, r3
 8000932:	6008      	str	r0, [r1, #0]
 8000934:	e7d5      	b.n	80008e2 <_malloc_trim_r+0x3e>
 8000936:	bf00      	nop
 8000938:	20000650 	.word	0x20000650
 800093c:	20000cf0 	.word	0x20000cf0
 8000940:	20000a58 	.word	0x20000a58

08000944 <_free_r>:
 8000944:	2900      	cmp	r1, #0
 8000946:	d061      	beq.n	8000a0c <_free_r+0xc8>
 8000948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800094a:	460c      	mov	r4, r1
 800094c:	4606      	mov	r6, r0
 800094e:	f7ff ff5f 	bl	8000810 <__malloc_lock>
 8000952:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8000956:	4f7b      	ldr	r7, [pc, #492]	; (8000b44 <_free_r+0x200>)
 8000958:	f1a4 0508 	sub.w	r5, r4, #8
 800095c:	f022 0101 	bic.w	r1, r2, #1
 8000960:	eb05 0c01 	add.w	ip, r5, r1
 8000964:	68b8      	ldr	r0, [r7, #8]
 8000966:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800096a:	4560      	cmp	r0, ip
 800096c:	f023 0303 	bic.w	r3, r3, #3
 8000970:	f000 808b 	beq.w	8000a8a <_free_r+0x146>
 8000974:	07d2      	lsls	r2, r2, #31
 8000976:	f8cc 3004 	str.w	r3, [ip, #4]
 800097a:	d432      	bmi.n	80009e2 <_free_r+0x9e>
 800097c:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8000980:	1aad      	subs	r5, r5, r2
 8000982:	4411      	add	r1, r2
 8000984:	68aa      	ldr	r2, [r5, #8]
 8000986:	f107 0008 	add.w	r0, r7, #8
 800098a:	4282      	cmp	r2, r0
 800098c:	d06a      	beq.n	8000a64 <_free_r+0x120>
 800098e:	eb0c 0403 	add.w	r4, ip, r3
 8000992:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8000996:	68ec      	ldr	r4, [r5, #12]
 8000998:	60d4      	str	r4, [r2, #12]
 800099a:	f01e 0f01 	tst.w	lr, #1
 800099e:	60a2      	str	r2, [r4, #8]
 80009a0:	f000 8097 	beq.w	8000ad2 <_free_r+0x18e>
 80009a4:	f041 0301 	orr.w	r3, r1, #1
 80009a8:	606b      	str	r3, [r5, #4]
 80009aa:	f8cc 1000 	str.w	r1, [ip]
 80009ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80009b2:	d235      	bcs.n	8000a20 <_free_r+0xdc>
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	08cb      	lsrs	r3, r1, #3
 80009b8:	0948      	lsrs	r0, r1, #5
 80009ba:	2101      	movs	r1, #1
 80009bc:	3301      	adds	r3, #1
 80009be:	4081      	lsls	r1, r0
 80009c0:	4311      	orrs	r1, r2
 80009c2:	6079      	str	r1, [r7, #4]
 80009c4:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 80009c8:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 80009cc:	3a08      	subs	r2, #8
 80009ce:	e9c5 1202 	strd	r1, r2, [r5, #8]
 80009d2:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 80009d6:	60cd      	str	r5, [r1, #12]
 80009d8:	4630      	mov	r0, r6
 80009da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80009de:	f7ff bf19 	b.w	8000814 <__malloc_unlock>
 80009e2:	eb0c 0203 	add.w	r2, ip, r3
 80009e6:	6852      	ldr	r2, [r2, #4]
 80009e8:	07d0      	lsls	r0, r2, #31
 80009ea:	d410      	bmi.n	8000a0e <_free_r+0xca>
 80009ec:	4419      	add	r1, r3
 80009ee:	f107 0008 	add.w	r0, r7, #8
 80009f2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 80009f6:	4283      	cmp	r3, r0
 80009f8:	d073      	beq.n	8000ae2 <_free_r+0x19e>
 80009fa:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	6093      	str	r3, [r2, #8]
 8000a02:	f041 0301 	orr.w	r3, r1, #1
 8000a06:	606b      	str	r3, [r5, #4]
 8000a08:	5069      	str	r1, [r5, r1]
 8000a0a:	e7d0      	b.n	80009ae <_free_r+0x6a>
 8000a0c:	4770      	bx	lr
 8000a0e:	f041 0301 	orr.w	r3, r1, #1
 8000a12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000a16:	f844 3c04 	str.w	r3, [r4, #-4]
 8000a1a:	f8cc 1000 	str.w	r1, [ip]
 8000a1e:	d3c9      	bcc.n	80009b4 <_free_r+0x70>
 8000a20:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8000a24:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8000a28:	d248      	bcs.n	8000abc <_free_r+0x178>
 8000a2a:	098b      	lsrs	r3, r1, #6
 8000a2c:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8000a30:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8000a34:	00c3      	lsls	r3, r0, #3
 8000a36:	18f8      	adds	r0, r7, r3
 8000a38:	58fb      	ldr	r3, [r7, r3]
 8000a3a:	3808      	subs	r0, #8
 8000a3c:	4298      	cmp	r0, r3
 8000a3e:	d059      	beq.n	8000af4 <_free_r+0x1b0>
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	f022 0203 	bic.w	r2, r2, #3
 8000a46:	428a      	cmp	r2, r1
 8000a48:	d902      	bls.n	8000a50 <_free_r+0x10c>
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	4298      	cmp	r0, r3
 8000a4e:	d1f7      	bne.n	8000a40 <_free_r+0xfc>
 8000a50:	68d8      	ldr	r0, [r3, #12]
 8000a52:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8000a56:	6085      	str	r5, [r0, #8]
 8000a58:	60dd      	str	r5, [r3, #12]
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000a60:	f7ff bed8 	b.w	8000814 <__malloc_unlock>
 8000a64:	eb0c 0203 	add.w	r2, ip, r3
 8000a68:	6852      	ldr	r2, [r2, #4]
 8000a6a:	07d2      	lsls	r2, r2, #31
 8000a6c:	d463      	bmi.n	8000b36 <_free_r+0x1f2>
 8000a6e:	440b      	add	r3, r1
 8000a70:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8000a74:	60ca      	str	r2, [r1, #12]
 8000a76:	6091      	str	r1, [r2, #8]
 8000a78:	f043 0201 	orr.w	r2, r3, #1
 8000a7c:	606a      	str	r2, [r5, #4]
 8000a7e:	4630      	mov	r0, r6
 8000a80:	50eb      	str	r3, [r5, r3]
 8000a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000a86:	f7ff bec5 	b.w	8000814 <__malloc_unlock>
 8000a8a:	440b      	add	r3, r1
 8000a8c:	07d1      	lsls	r1, r2, #31
 8000a8e:	d407      	bmi.n	8000aa0 <_free_r+0x15c>
 8000a90:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8000a94:	1aad      	subs	r5, r5, r2
 8000a96:	4413      	add	r3, r2
 8000a98:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8000a9c:	60ca      	str	r2, [r1, #12]
 8000a9e:	6091      	str	r1, [r2, #8]
 8000aa0:	f043 0201 	orr.w	r2, r3, #1
 8000aa4:	606a      	str	r2, [r5, #4]
 8000aa6:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <_free_r+0x204>)
 8000aa8:	60bd      	str	r5, [r7, #8]
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d893      	bhi.n	80009d8 <_free_r+0x94>
 8000ab0:	4b26      	ldr	r3, [pc, #152]	; (8000b4c <_free_r+0x208>)
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	6819      	ldr	r1, [r3, #0]
 8000ab6:	f7ff fef5 	bl	80008a4 <_malloc_trim_r>
 8000aba:	e78d      	b.n	80009d8 <_free_r+0x94>
 8000abc:	2b14      	cmp	r3, #20
 8000abe:	d90a      	bls.n	8000ad6 <_free_r+0x192>
 8000ac0:	2b54      	cmp	r3, #84	; 0x54
 8000ac2:	d81f      	bhi.n	8000b04 <_free_r+0x1c0>
 8000ac4:	0b0b      	lsrs	r3, r1, #12
 8000ac6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8000aca:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8000ace:	00c3      	lsls	r3, r0, #3
 8000ad0:	e7b1      	b.n	8000a36 <_free_r+0xf2>
 8000ad2:	4419      	add	r1, r3
 8000ad4:	e78d      	b.n	80009f2 <_free_r+0xae>
 8000ad6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8000ada:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8000ade:	00c3      	lsls	r3, r0, #3
 8000ae0:	e7a9      	b.n	8000a36 <_free_r+0xf2>
 8000ae2:	f041 0301 	orr.w	r3, r1, #1
 8000ae6:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8000aea:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8000aee:	606b      	str	r3, [r5, #4]
 8000af0:	5069      	str	r1, [r5, r1]
 8000af2:	e771      	b.n	80009d8 <_free_r+0x94>
 8000af4:	6879      	ldr	r1, [r7, #4]
 8000af6:	1092      	asrs	r2, r2, #2
 8000af8:	2401      	movs	r4, #1
 8000afa:	fa04 f202 	lsl.w	r2, r4, r2
 8000afe:	430a      	orrs	r2, r1
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	e7a6      	b.n	8000a52 <_free_r+0x10e>
 8000b04:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000b08:	d806      	bhi.n	8000b18 <_free_r+0x1d4>
 8000b0a:	0bcb      	lsrs	r3, r1, #15
 8000b0c:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8000b10:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8000b14:	00c3      	lsls	r3, r0, #3
 8000b16:	e78e      	b.n	8000a36 <_free_r+0xf2>
 8000b18:	f240 5254 	movw	r2, #1364	; 0x554
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d806      	bhi.n	8000b2e <_free_r+0x1ea>
 8000b20:	0c8b      	lsrs	r3, r1, #18
 8000b22:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8000b26:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8000b2a:	00c3      	lsls	r3, r0, #3
 8000b2c:	e783      	b.n	8000a36 <_free_r+0xf2>
 8000b2e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000b32:	227e      	movs	r2, #126	; 0x7e
 8000b34:	e77f      	b.n	8000a36 <_free_r+0xf2>
 8000b36:	f041 0301 	orr.w	r3, r1, #1
 8000b3a:	606b      	str	r3, [r5, #4]
 8000b3c:	f8cc 1000 	str.w	r1, [ip]
 8000b40:	e74a      	b.n	80009d8 <_free_r+0x94>
 8000b42:	bf00      	nop
 8000b44:	20000650 	.word	0x20000650
 8000b48:	20000a5c 	.word	0x20000a5c
 8000b4c:	20000cec 	.word	0x20000cec

08000b50 <reset>:

uint8_t reset(uint8_t* x, uint8_t len)
{
    // Reset key here if needed
	return 0x00;
}
 8000b50:	2000      	movs	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <get_mask>:
{
 8000b54:	b508      	push	{r3, lr}
  aes_indep_mask(m, len);
 8000b56:	f001 f80c 	bl	8001b72 <aes_indep_mask>
}
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	bd08      	pop	{r3, pc}

08000b5e <get_key>:
{
 8000b5e:	b508      	push	{r3, lr}
	aes_indep_key(k);
 8000b60:	f001 f801 	bl	8001b66 <aes_indep_key>
}
 8000b64:	2000      	movs	r0, #0
 8000b66:	bd08      	pop	{r3, pc}

08000b68 <get_pt>:
{
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4604      	mov	r4, r0
    aes_indep_enc_pretrigger(pt);
 8000b6c:	f000 ffff 	bl	8001b6e <aes_indep_enc_pretrigger>
	trigger_high();
 8000b70:	f000 fa2a 	bl	8000fc8 <trigger_high>
	aes_indep_enc(pt); /* encrypting the data block */
 8000b74:	4620      	mov	r0, r4
 8000b76:	f000 fff8 	bl	8001b6a <aes_indep_enc>
	trigger_low();
 8000b7a:	f000 fa2d 	bl	8000fd8 <trigger_low>
    aes_indep_enc_posttrigger(pt);
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f000 fff6 	bl	8001b70 <aes_indep_enc_posttrigger>
	simpleserial_put('r', 16, pt);
 8000b84:	4622      	mov	r2, r4
 8000b86:	2110      	movs	r1, #16
 8000b88:	2072      	movs	r0, #114	; 0x72
 8000b8a:	f000 f8c1 	bl	8000d10 <simpleserial_put>
}
 8000b8e:	2000      	movs	r0, #0
 8000b90:	bd10      	pop	{r4, pc}
 8000b92:	0000      	movs	r0, r0

08000b94 <main>:
    return 0;
}


int main(void)
{
 8000b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t tmp[KEY_LENGTH] = {DEFAULT_KEY};
 8000b96:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <main+0x8c>)
 8000b98:	466a      	mov	r2, sp
 8000b9a:	f103 0610 	add.w	r6, r3, #16
 8000b9e:	4615      	mov	r5, r2
 8000ba0:	6818      	ldr	r0, [r3, #0]
 8000ba2:	6859      	ldr	r1, [r3, #4]
 8000ba4:	4614      	mov	r4, r2
 8000ba6:	c403      	stmia	r4!, {r0, r1}
 8000ba8:	3308      	adds	r3, #8
 8000baa:	42b3      	cmp	r3, r6
 8000bac:	4622      	mov	r2, r4
 8000bae:	d1f7      	bne.n	8000ba0 <main+0xc>

    platform_init();
 8000bb0:	f000 f96c 	bl	8000e8c <platform_init>
    init_uart();
 8000bb4:	f000 f9aa 	bl	8000f0c <init_uart>
    trigger_setup();
 8000bb8:	f000 f9e6 	bl	8000f88 <trigger_setup>

	aes_indep_init();
 8000bbc:	f000 ffd2 	bl	8001b64 <aes_indep_init>
	aes_indep_key(tmp);
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f000 ffd0 	bl	8001b66 <aes_indep_key>

    /* Uncomment this to get a HELLO message for debug */

    putch('h');
 8000bc6:	2068      	movs	r0, #104	; 0x68
 8000bc8:	f000 fa20 	bl	800100c <putch>
    putch('e');
 8000bcc:	2065      	movs	r0, #101	; 0x65
 8000bce:	f000 fa1d 	bl	800100c <putch>
    putch('l');
 8000bd2:	206c      	movs	r0, #108	; 0x6c
 8000bd4:	f000 fa1a 	bl	800100c <putch>
    putch('l');
 8000bd8:	206c      	movs	r0, #108	; 0x6c
 8000bda:	f000 fa17 	bl	800100c <putch>
    putch('o');
 8000bde:	206f      	movs	r0, #111	; 0x6f
 8000be0:	f000 fa14 	bl	800100c <putch>
    putch('\n');
 8000be4:	200a      	movs	r0, #10
 8000be6:	f000 fa11 	bl	800100c <putch>

	simpleserial_init();
 8000bea:	f000 f87b 	bl	8000ce4 <simpleserial_init>

    simpleserial_addcmd('k', 16, get_key);
 8000bee:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <main+0x90>)
 8000bf0:	2110      	movs	r1, #16
 8000bf2:	206b      	movs	r0, #107	; 0x6b
 8000bf4:	f000 f872 	bl	8000cdc <simpleserial_addcmd>
    simpleserial_addcmd('p', 16,  get_pt);
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <main+0x94>)
 8000bfa:	2110      	movs	r1, #16
 8000bfc:	2070      	movs	r0, #112	; 0x70
 8000bfe:	f000 f86d 	bl	8000cdc <simpleserial_addcmd>
    simpleserial_addcmd('x',  0,   reset);
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <main+0x98>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	2078      	movs	r0, #120	; 0x78
 8000c08:	f000 f868 	bl	8000cdc <simpleserial_addcmd>
    simpleserial_addcmd_flags('m', 18, get_mask, CMD_FLAG_LEN);
 8000c0c:	4a08      	ldr	r2, [pc, #32]	; (8000c30 <main+0x9c>)
 8000c0e:	2301      	movs	r3, #1
 8000c10:	2112      	movs	r1, #18
 8000c12:	206d      	movs	r0, #109	; 0x6d
 8000c14:	f000 f84c 	bl	8000cb0 <simpleserial_addcmd_flags>
    // simpleserial_addcmd('s', 2, enc_multi_setnum);
    // simpleserial_addcmd('f', 16, enc_multi_getpt);

    while(1)
        simpleserial_get();
 8000c18:	f000 f8d4 	bl	8000dc4 <simpleserial_get>
    while(1)
 8000c1c:	e7fc      	b.n	8000c18 <main+0x84>
 8000c1e:	bf00      	nop
 8000c20:	08001c00 	.word	0x08001c00
 8000c24:	08000b5f 	.word	0x08000b5f
 8000c28:	08000b69 	.word	0x08000b69
 8000c2c:	08000b51 	.word	0x08000b51
 8000c30:	08000b55 	.word	0x08000b55

08000c34 <check_version>:
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
	return SS_VER;
}
 8000c34:	2001      	movs	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 8000c38:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(int i = 0; i < len; i++)
 8000c3a:	2500      	movs	r5, #0
	{
		char n_hi = ascii_buf[2*i];
		char n_lo = ascii_buf[2*i+1];
 8000c3c:	1c4f      	adds	r7, r1, #1
	for(int i = 0; i < len; i++)
 8000c3e:	4285      	cmp	r5, r0
 8000c40:	db01      	blt.n	8000c46 <hex_decode+0xe>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
		else
			return 1;
	}

	return 0;
 8000c42:	2000      	movs	r0, #0
 8000c44:	e021      	b.n	8000c8a <hex_decode+0x52>
		char n_lo = ascii_buf[2*i+1];
 8000c46:	f817 4015 	ldrb.w	r4, [r7, r5, lsl #1]
		char n_hi = ascii_buf[2*i];
 8000c4a:	f811 3015 	ldrb.w	r3, [r1, r5, lsl #1]
		if(n_lo >= '0' && n_lo <= '9')
 8000c4e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8000c52:	b2f6      	uxtb	r6, r6
 8000c54:	2e09      	cmp	r6, #9
 8000c56:	d80c      	bhi.n	8000c72 <hex_decode+0x3a>
			data_buf[i] = n_lo - '0';
 8000c58:	7016      	strb	r6, [r2, #0]
		if(n_hi >= '0' && n_hi <= '9')
 8000c5a:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8000c5e:	b2e6      	uxtb	r6, r4
 8000c60:	2e09      	cmp	r6, #9
 8000c62:	d815      	bhi.n	8000c90 <hex_decode+0x58>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000c64:	7813      	ldrb	r3, [r2, #0]
 8000c66:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000c6a:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < len; i++)
 8000c6c:	3501      	adds	r5, #1
 8000c6e:	3201      	adds	r2, #1
 8000c70:	e7e5      	b.n	8000c3e <hex_decode+0x6>
		else if(n_lo >= 'A' && n_lo <= 'F')
 8000c72:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8000c76:	2e05      	cmp	r6, #5
 8000c78:	d802      	bhi.n	8000c80 <hex_decode+0x48>
			data_buf[i] = n_lo - 'A' + 10;
 8000c7a:	3c37      	subs	r4, #55	; 0x37
			data_buf[i] = n_lo - 'a' + 10;
 8000c7c:	7014      	strb	r4, [r2, #0]
 8000c7e:	e7ec      	b.n	8000c5a <hex_decode+0x22>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8000c80:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8000c84:	2e05      	cmp	r6, #5
 8000c86:	d901      	bls.n	8000c8c <hex_decode+0x54>
			return 1;
 8000c88:	2001      	movs	r0, #1
}
 8000c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			data_buf[i] = n_lo - 'a' + 10;
 8000c8c:	3c57      	subs	r4, #87	; 0x57
 8000c8e:	e7f5      	b.n	8000c7c <hex_decode+0x44>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8000c90:	f1a3 0441 	sub.w	r4, r3, #65	; 0x41
 8000c94:	2c05      	cmp	r4, #5
 8000c96:	d802      	bhi.n	8000c9e <hex_decode+0x66>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8000c98:	f1a3 0437 	sub.w	r4, r3, #55	; 0x37
 8000c9c:	e7e2      	b.n	8000c64 <hex_decode+0x2c>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8000c9e:	f1a3 0461 	sub.w	r4, r3, #97	; 0x61
 8000ca2:	2c05      	cmp	r4, #5
 8000ca4:	d8f0      	bhi.n	8000c88 <hex_decode+0x50>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 8000ca6:	7814      	ldrb	r4, [r2, #0]
 8000ca8:	3b57      	subs	r3, #87	; 0x57
 8000caa:	ea44 1303 	orr.w	r3, r4, r3, lsl #4
 8000cae:	e7dc      	b.n	8000c6a <hex_decode+0x32>

08000cb0 <simpleserial_addcmd_flags>:
{
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
}

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8000cb0:	b570      	push	{r4, r5, r6, lr}
	if(num_commands >= MAX_SS_CMDS)
 8000cb2:	4e09      	ldr	r6, [pc, #36]	; (8000cd8 <simpleserial_addcmd_flags+0x28>)
 8000cb4:	6834      	ldr	r4, [r6, #0]
 8000cb6:	2c0f      	cmp	r4, #15
 8000cb8:	dc0b      	bgt.n	8000cd2 <simpleserial_addcmd_flags+0x22>
		return 1;

	if(len >= MAX_SS_LEN)
 8000cba:	29ff      	cmp	r1, #255	; 0xff
 8000cbc:	d809      	bhi.n	8000cd2 <simpleserial_addcmd_flags+0x22>
		return 1;

	commands[num_commands].c   = c;
 8000cbe:	eb06 1504 	add.w	r5, r6, r4, lsl #4
	commands[num_commands].len = len;
	commands[num_commands].fp  = fp;
 8000cc2:	e9c5 1202 	strd	r1, r2, [r5, #8]
	commands[num_commands].flags = fl;
	num_commands++;
 8000cc6:	3401      	adds	r4, #1
	commands[num_commands].c   = c;
 8000cc8:	7128      	strb	r0, [r5, #4]
	commands[num_commands].flags = fl;
 8000cca:	742b      	strb	r3, [r5, #16]
	num_commands++;
 8000ccc:	6034      	str	r4, [r6, #0]

	return 0;
 8000cce:	2000      	movs	r0, #0
}
 8000cd0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	e7fc      	b.n	8000cd0 <simpleserial_addcmd_flags+0x20>
 8000cd6:	bf00      	nop
 8000cd8:	20000a7c 	.word	0x20000a7c

08000cdc <simpleserial_addcmd>:
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f7ff bfe7 	b.w	8000cb0 <simpleserial_addcmd_flags>
 8000ce2:	0000      	movs	r0, r0

08000ce4 <simpleserial_init>:
{
 8000ce4:	b508      	push	{r3, lr}
	simpleserial_addcmd('v', 0, check_version);
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <simpleserial_init+0x20>)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2076      	movs	r0, #118	; 0x76
 8000cec:	f7ff fff6 	bl	8000cdc <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 8000cf0:	4a05      	ldr	r2, [pc, #20]	; (8000d08 <simpleserial_init+0x24>)
 8000cf2:	2077      	movs	r0, #119	; 0x77
 8000cf4:	f7ff fff2 	bl	8000cdc <simpleserial_addcmd>
}
 8000cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    simpleserial_addcmd('y', 0, ss_num_commands);
 8000cfc:	4a03      	ldr	r2, [pc, #12]	; (8000d0c <simpleserial_init+0x28>)
 8000cfe:	2079      	movs	r0, #121	; 0x79
 8000d00:	f7ff bfec 	b.w	8000cdc <simpleserial_addcmd>
 8000d04:	08000c35 	.word	0x08000c35
 8000d08:	08000d75 	.word	0x08000d75
 8000d0c:	08000d51 	.word	0x08000d51

08000d10 <simpleserial_put>:
	simpleserial_put('z', 1, ret);
#endif
}

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d12:	4614      	mov	r4, r2
 8000d14:	460e      	mov	r6, r1
	// Write first character
	putch(c);
 8000d16:	f000 f979 	bl	800100c <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
	{
		putch(hex_lookup[output[i] >> 4 ]);
 8000d1a:	4f0c      	ldr	r7, [pc, #48]	; (8000d4c <simpleserial_put+0x3c>)
 8000d1c:	1e65      	subs	r5, r4, #1
	for(int i = 0; i < size; i++)
 8000d1e:	f1c4 0401 	rsb	r4, r4, #1
 8000d22:	1963      	adds	r3, r4, r5
 8000d24:	429e      	cmp	r6, r3
 8000d26:	dc04      	bgt.n	8000d32 <simpleserial_put+0x22>
		putch(hex_lookup[output[i] & 0xF]);
	}

	// Write trailing '\n'
	putch('\n');
}
 8000d28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	putch('\n');
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f000 b96d 	b.w	800100c <putch>
		putch(hex_lookup[output[i] >> 4 ]);
 8000d32:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8000d36:	091b      	lsrs	r3, r3, #4
 8000d38:	5cf8      	ldrb	r0, [r7, r3]
 8000d3a:	f000 f967 	bl	800100c <putch>
		putch(hex_lookup[output[i] & 0xF]);
 8000d3e:	782b      	ldrb	r3, [r5, #0]
 8000d40:	f003 030f 	and.w	r3, r3, #15
 8000d44:	5cf8      	ldrb	r0, [r7, r3]
 8000d46:	f000 f961 	bl	800100c <putch>
	for(int i = 0; i < size; i++)
 8000d4a:	e7ea      	b.n	8000d22 <simpleserial_put+0x12>
 8000d4c:	08001bec 	.word	0x08001bec

08000d50 <ss_num_commands>:
{
 8000d50:	b507      	push	{r0, r1, r2, lr}
    uint8_t ncmds = num_commands & 0xFF;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <ss_num_commands+0x20>)
    simpleserial_put('r', 0x01, &ncmds);
 8000d54:	f10d 0207 	add.w	r2, sp, #7
    uint8_t ncmds = num_commands & 0xFF;
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f88d 3007 	strb.w	r3, [sp, #7]
    simpleserial_put('r', 0x01, &ncmds);
 8000d5e:	2101      	movs	r1, #1
 8000d60:	2072      	movs	r0, #114	; 0x72
 8000d62:	f7ff ffd5 	bl	8000d10 <simpleserial_put>
}
 8000d66:	2000      	movs	r0, #0
 8000d68:	b003      	add	sp, #12
 8000d6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d6e:	bf00      	nop
 8000d70:	20000a7c 	.word	0x20000a7c

08000d74 <ss_get_commands>:
{
 8000d74:	b570      	push	{r4, r5, r6, lr}
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000d76:	4c12      	ldr	r4, [pc, #72]	; (8000dc0 <ss_get_commands+0x4c>)
 8000d78:	6821      	ldr	r1, [r4, #0]
{
 8000d7a:	b08c      	sub	sp, #48	; 0x30
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000d7c:	b2cd      	uxtb	r5, r1
 8000d7e:	2000      	movs	r0, #0
 8000d80:	b2c3      	uxtb	r3, r0
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f100 0001 	add.w	r0, r0, #1
 8000d88:	db09      	blt.n	8000d9e <ss_get_commands+0x2a>
    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8000d8a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000d8e:	466a      	mov	r2, sp
 8000d90:	b2c9      	uxtb	r1, r1
 8000d92:	2072      	movs	r0, #114	; 0x72
 8000d94:	f7ff ffbc 	bl	8000d10 <simpleserial_put>
}
 8000d98:	2000      	movs	r0, #0
 8000d9a:	b00c      	add	sp, #48	; 0x30
 8000d9c:	bd70      	pop	{r4, r5, r6, pc}
        repr_cmd_buf[i].c = commands[i].c;
 8000d9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000da2:	3230      	adds	r2, #48	; 0x30
 8000da4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8000da8:	446a      	add	r2, sp
 8000daa:	791e      	ldrb	r6, [r3, #4]
 8000dac:	f802 6c30 	strb.w	r6, [r2, #-48]
        repr_cmd_buf[i].len = commands[i].len;
 8000db0:	689e      	ldr	r6, [r3, #8]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000db2:	7c1b      	ldrb	r3, [r3, #16]
        repr_cmd_buf[i].len = commands[i].len;
 8000db4:	f802 6c2f 	strb.w	r6, [r2, #-47]
        repr_cmd_buf[i].flags = commands[i].flags;
 8000db8:	f802 3c2e 	strb.w	r3, [r2, #-46]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8000dbc:	e7e0      	b.n	8000d80 <ss_get_commands+0xc>
 8000dbe:	bf00      	nop
 8000dc0:	20000a7c 	.word	0x20000a7c

08000dc4 <simpleserial_get>:
{
 8000dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for(cmd = 0; cmd < num_commands; cmd++)
 8000dc8:	4d2f      	ldr	r5, [pc, #188]	; (8000e88 <simpleserial_get+0xc4>)
{
 8000dca:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
	c = getch();
 8000dce:	f000 f90b 	bl	8000fe8 <getch>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000dd2:	462a      	mov	r2, r5
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f852 1b04 	ldr.w	r1, [r2], #4
 8000dda:	4299      	cmp	r1, r3
 8000ddc:	dc04      	bgt.n	8000de8 <simpleserial_get+0x24>
	if(cmd == num_commands)
 8000dde:	d107      	bne.n	8000df0 <simpleserial_get+0x2c>
}
 8000de0:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
 8000de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(commands[cmd].c == c)
 8000de8:	011c      	lsls	r4, r3, #4
 8000dea:	5ca4      	ldrb	r4, [r4, r2]
 8000dec:	4284      	cmp	r4, r0
 8000dee:	d13e      	bne.n	8000e6e <simpleserial_get+0xaa>
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8000df0:	eb05 1403 	add.w	r4, r5, r3, lsl #4
 8000df4:	011e      	lsls	r6, r3, #4
 8000df6:	7c23      	ldrb	r3, [r4, #16]
 8000df8:	07db      	lsls	r3, r3, #31
 8000dfa:	d514      	bpl.n	8000e26 <simpleserial_get+0x62>
		uint8_t l = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f88d 3008 	strb.w	r3, [sp, #8]
		buff[0] = getch();
 8000e02:	f000 f8f1 	bl	8000fe8 <getch>
 8000e06:	f88d 0108 	strb.w	r0, [sp, #264]	; 0x108
		buff[1] = getch();
 8000e0a:	f000 f8ed 	bl	8000fe8 <getch>
		if (hex_decode(1, buff, &l))
 8000e0e:	aa02      	add	r2, sp, #8
		buff[1] = getch();
 8000e10:	f88d 0109 	strb.w	r0, [sp, #265]	; 0x109
		if (hex_decode(1, buff, &l))
 8000e14:	a942      	add	r1, sp, #264	; 0x108
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff ff0e 	bl	8000c38 <hex_decode>
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	d1df      	bne.n	8000de0 <simpleserial_get+0x1c>
		commands[cmd].len = l;
 8000e20:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8000e24:	60a3      	str	r3, [r4, #8]
 8000e26:	af42      	add	r7, sp, #264	; 0x108
	for(cmd = 0; cmd < num_commands; cmd++)
 8000e28:	2400      	movs	r4, #0
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000e2a:	eb05 0806 	add.w	r8, r5, r6
 8000e2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8000e32:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
 8000e36:	d31c      	bcc.n	8000e72 <simpleserial_get+0xae>
	c = getch();
 8000e38:	f000 f8d6 	bl	8000fe8 <getch>
	if(c != '\n' && c != '\r')
 8000e3c:	280a      	cmp	r0, #10
 8000e3e:	d001      	beq.n	8000e44 <simpleserial_get+0x80>
 8000e40:	280d      	cmp	r0, #13
 8000e42:	d1cd      	bne.n	8000de0 <simpleserial_get+0x1c>
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 8000e44:	4435      	add	r5, r6
 8000e46:	aa02      	add	r2, sp, #8
 8000e48:	68ac      	ldr	r4, [r5, #8]
 8000e4a:	a942      	add	r1, sp, #264	; 0x108
 8000e4c:	4620      	mov	r0, r4
 8000e4e:	f7ff fef3 	bl	8000c38 <hex_decode>
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d1c4      	bne.n	8000de0 <simpleserial_get+0x1c>
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8000e56:	b2e1      	uxtb	r1, r4
 8000e58:	68eb      	ldr	r3, [r5, #12]
 8000e5a:	a802      	add	r0, sp, #8
 8000e5c:	4798      	blx	r3
	simpleserial_put('z', 1, ret);
 8000e5e:	aa01      	add	r2, sp, #4
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 8000e60:	f88d 0004 	strb.w	r0, [sp, #4]
	simpleserial_put('z', 1, ret);
 8000e64:	2101      	movs	r1, #1
 8000e66:	207a      	movs	r0, #122	; 0x7a
 8000e68:	f7ff ff52 	bl	8000d10 <simpleserial_put>
 8000e6c:	e7b8      	b.n	8000de0 <simpleserial_get+0x1c>
	for(cmd = 0; cmd < num_commands; cmd++)
 8000e6e:	3301      	adds	r3, #1
 8000e70:	e7b3      	b.n	8000dda <simpleserial_get+0x16>
		c = getch();
 8000e72:	f000 f8b9 	bl	8000fe8 <getch>
		if(c == '\n' || c == '\r')
 8000e76:	280a      	cmp	r0, #10
 8000e78:	d0b2      	beq.n	8000de0 <simpleserial_get+0x1c>
 8000e7a:	280d      	cmp	r0, #13
 8000e7c:	d0b0      	beq.n	8000de0 <simpleserial_get+0x1c>
		ascii_buf[i] = c;
 8000e7e:	f807 0b01 	strb.w	r0, [r7], #1
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8000e82:	3401      	adds	r4, #1
 8000e84:	e7d3      	b.n	8000e2e <simpleserial_get+0x6a>
 8000e86:	bf00      	nop
 8000e88:	20000a7c 	.word	0x20000a7c

08000e8c <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 8000e8c:	b530      	push	{r4, r5, lr}
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000e8e:	2203      	movs	r2, #3
{
 8000e90:	b093      	sub	sp, #76	; 0x4c
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000e92:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e96:	e9cd 2306 	strd	r2, r3, [sp, #24]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8000e9a:	2102      	movs	r1, #2
 8000e9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ea0:	e9cd 130c 	strd	r1, r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
	RCC_OscInitStruct.PLL.PLLN       = 196;
 8000ea4:	200c      	movs	r0, #12
 8000ea6:	23c4      	movs	r3, #196	; 0xc4
 8000ea8:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8000eac:	2404      	movs	r4, #4
 8000eae:	2307      	movs	r3, #7
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8000eb0:	2501      	movs	r5, #1
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eb2:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 8000eb4:	e9cd 4310 	strd	r4, r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8000eb8:	9509      	str	r5, [sp, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000eba:	f000 f8bf 	bl	800103c <HAL_RCC_OscConfig>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	b100      	cbz	r0, 8000ec4 <platform_init+0x38>
        for(;;);
 8000ec2:	e7fe      	b.n	8000ec2 <platform_init+0x36>
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8000ec4:	4601      	mov	r1, r0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ec6:	e9cd 0003 	strd	r0, r0, [sp, #12]
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000eca:	230f      	movs	r3, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ecc:	9005      	str	r0, [sp, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8000ece:	a801      	add	r0, sp, #4
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000ed0:	e9cd 3501 	strd	r3, r5, [sp, #4]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8000ed4:	f000 fa52 	bl	800137c <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 8000ed8:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <platform_init+0x74>)
 8000eda:	9400      	str	r4, [sp, #0]
 8000edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	RngHandle.Instance = RNG;
 8000ede:	4809      	ldr	r0, [pc, #36]	; (8000f04 <platform_init+0x78>)
	__HAL_RCC_RNG_CLK_ENABLE();
 8000ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	9b00      	ldr	r3, [sp, #0]
	RngHandle.Instance = RNG;
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <platform_init+0x7c>)
 8000ef2:	6003      	str	r3, [r0, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 8000ef4:	7144      	strb	r4, [r0, #5]
	HAL_RNG_Init(&RngHandle);
 8000ef6:	f000 fce2 	bl	80018be <HAL_RNG_Init>

}
 8000efa:	b013      	add	sp, #76	; 0x4c
 8000efc:	bd30      	pop	{r4, r5, pc}
 8000efe:	bf00      	nop
 8000f00:	40023800 	.word	0x40023800
 8000f04:	20000b80 	.word	0x20000b80
 8000f08:	50060800 	.word	0x50060800

08000f0c <init_uart>:

void init_uart(void)
{
 8000f0c:	b530      	push	{r4, r5, lr}
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
{
 8000f10:	b089      	sub	sp, #36	; 0x24
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000f12:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000f16:	e9cd 2303 	strd	r2, r3, [sp, #12]
	GpioInit.Pull      = GPIO_PULLUP;
 8000f1a:	2201      	movs	r2, #1
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
	GpioInit.Alternate = GPIO_AF7_USART1;
	__GPIOA_CLK_ENABLE();
 8000f20:	4c15      	ldr	r4, [pc, #84]	; (8000f78 <init_uart+0x6c>)
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000f22:	4816      	ldr	r0, [pc, #88]	; (8000f7c <init_uart+0x70>)
	__GPIOA_CLK_ENABLE();
 8000f24:	2500      	movs	r5, #0
	GpioInit.Alternate = GPIO_AF7_USART1;
 8000f26:	2307      	movs	r3, #7
	__GPIOA_CLK_ENABLE();
 8000f28:	9501      	str	r5, [sp, #4]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8000f2a:	9307      	str	r3, [sp, #28]
	__GPIOA_CLK_ENABLE();
 8000f2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	6323      	str	r3, [r4, #48]	; 0x30
 8000f32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f34:	4013      	ands	r3, r2
 8000f36:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000f38:	a903      	add	r1, sp, #12
	__GPIOA_CLK_ENABLE();
 8000f3a:	9b01      	ldr	r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000f3c:	f000 fab6 	bl	80014ac <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8000f40:	480f      	ldr	r0, [pc, #60]	; (8000f80 <init_uart+0x74>)
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 8000f42:	4910      	ldr	r1, [pc, #64]	; (8000f84 <init_uart+0x78>)
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
	UartHandle.Init.Parity     = UART_PARITY_NONE;
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
	__USART1_CLK_ENABLE();
 8000f44:	9502      	str	r5, [sp, #8]
  UartHandle.Init.BaudRate   = 38400;
 8000f46:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000f4a:	e9c0 1303 	strd	r1, r3, [r0, #12]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000f4e:	e9c0 5505 	strd	r5, r5, [r0, #20]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000f52:	230c      	movs	r3, #12
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000f54:	61c5      	str	r5, [r0, #28]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000f56:	6245      	str	r5, [r0, #36]	; 0x24
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000f58:	6203      	str	r3, [r0, #32]
	__USART1_CLK_ENABLE();
 8000f5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f5c:	f043 0310 	orr.w	r3, r3, #16
 8000f60:	6463      	str	r3, [r4, #68]	; 0x44
 8000f62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	9302      	str	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 8000f6a:	300c      	adds	r0, #12
	__USART1_CLK_ENABLE();
 8000f6c:	9b02      	ldr	r3, [sp, #8]
	HAL_UART_Init(&UartHandle);
 8000f6e:	f000 fb89 	bl	8001684 <HAL_UART_Init>
}
 8000f72:	b009      	add	sp, #36	; 0x24
 8000f74:	bd30      	pop	{r4, r5, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	20000b80 	.word	0x20000b80
 8000f84:	40011000 	.word	0x40011000

08000f88 <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 8000f88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	__GPIOA_CLK_ENABLE();
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <trigger_setup+0x38>)
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
	GpioInit.Pull      = GPIO_NOPULL;
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <trigger_setup+0x3c>)
	__GPIOA_CLK_ENABLE();
 8000f8e:	2100      	movs	r1, #0
 8000f90:	9100      	str	r1, [sp, #0]
 8000f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f94:	f042 0201 	orr.w	r2, r2, #1
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	GpioInit.Pull      = GPIO_NOPULL;
 8000f9c:	9103      	str	r1, [sp, #12]
	__GPIOA_CLK_ENABLE();
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	9b00      	ldr	r3, [sp, #0]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8000fa6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000faa:	2301      	movs	r3, #1
 8000fac:	e9cd 2301 	strd	r2, r3, [sp, #4]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000fb0:	a901      	add	r1, sp, #4
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000fb6:	f000 fa79 	bl	80014ac <HAL_GPIO_Init>
#endif
}
 8000fba:	b007      	add	sp, #28
 8000fbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <trigger_high>:
void trigger_high(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <trigger_high+0xc>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd0:	f000 bb52 	b.w	8001678 <HAL_GPIO_WritePin>
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <trigger_low>:
void trigger_low(void)
{
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <trigger_low+0xc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe0:	f000 bb4a 	b.w	8001678 <HAL_GPIO_WritePin>
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <getch>:
#endif
}
char getch(void)
{
 8000fe8:	b513      	push	{r0, r1, r4, lr}
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 8000fea:	4c07      	ldr	r4, [pc, #28]	; (8001008 <getch+0x20>)
 8000fec:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f10d 0107 	add.w	r1, sp, #7
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 fbf9 	bl	80017ee <HAL_UART_Receive>
 8000ffc:	2800      	cmp	r0, #0
 8000ffe:	d1f5      	bne.n	8000fec <getch+0x4>
	return d;
}
 8001000:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001004:	b002      	add	sp, #8
 8001006:	bd10      	pop	{r4, pc}
 8001008:	20000b8c 	.word	0x20000b8c

0800100c <putch>:

void putch(char c)
{
 800100c:	b507      	push	{r0, r1, r2, lr}
	uint8_t d  = c;
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 800100e:	f241 3388 	movw	r3, #5000	; 0x1388
	uint8_t d  = c;
 8001012:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 8001016:	2201      	movs	r2, #1
 8001018:	f10d 0107 	add.w	r1, sp, #7
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <putch+0x1c>)
 800101e:	f000 fba1 	bl	8001764 <HAL_UART_Transmit>
}
 8001022:	b003      	add	sp, #12
 8001024:	f85d fb04 	ldr.w	pc, [sp], #4
 8001028:	20000b8c 	.word	0x20000b8c

0800102c <HAL_GetTick>:


uint32_t HAL_GetTick(void)
{
	static uint32_t tick;
	return tick++;;
 800102c:	4b02      	ldr	r3, [pc, #8]	; (8001038 <HAL_GetTick+0xc>)
 800102e:	6818      	ldr	r0, [r3, #0]
 8001030:	1c42      	adds	r2, r0, #1
 8001032:	601a      	str	r2, [r3, #0]
}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000c1c 	.word	0x20000c1c

0800103c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800103c:	6803      	ldr	r3, [r0, #0]
{
 800103e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001040:	07de      	lsls	r6, r3, #31
{
 8001042:	4601      	mov	r1, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001044:	d43b      	bmi.n	80010be <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	680b      	ldr	r3, [r1, #0]
 8001048:	079d      	lsls	r5, r3, #30
 800104a:	f100 808b 	bmi.w	8001164 <HAL_RCC_OscConfig+0x128>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800104e:	680b      	ldr	r3, [r1, #0]
 8001050:	0718      	lsls	r0, r3, #28
 8001052:	f100 80d6 	bmi.w	8001202 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001056:	680b      	ldr	r3, [r1, #0]
 8001058:	075a      	lsls	r2, r3, #29
 800105a:	d52a      	bpl.n	80010b2 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	4b91      	ldr	r3, [pc, #580]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001062:	4c92      	ldr	r4, [pc, #584]	; (80012ac <HAL_RCC_OscConfig+0x270>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001066:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6023      	str	r3, [r4, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 800107e:	f7ff ffd5 	bl	800102c <HAL_GetTick>
 8001082:	4605      	mov	r5, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	05d8      	lsls	r0, r3, #23
 8001088:	f140 80df 	bpl.w	800124a <HAL_RCC_OscConfig+0x20e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800108c:	688b      	ldr	r3, [r1, #8]
 800108e:	4c86      	ldr	r4, [pc, #536]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001090:	2b01      	cmp	r3, #1
 8001092:	f040 80e1 	bne.w	8001258 <HAL_RCC_OscConfig+0x21c>
 8001096:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	6723      	str	r3, [r4, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109e:	f7ff ffc5 	bl	800102c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a2:	4d81      	ldr	r5, [pc, #516]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 80010a4:	4604      	mov	r4, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a6:	f241 3688 	movw	r6, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010aa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010ac:	079a      	lsls	r2, r3, #30
 80010ae:	f140 80f4 	bpl.w	800129a <HAL_RCC_OscConfig+0x25e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010b2:	698a      	ldr	r2, [r1, #24]
 80010b4:	2a00      	cmp	r2, #0
 80010b6:	f040 80ff 	bne.w	80012b8 <HAL_RCC_OscConfig+0x27c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80010ba:	2000      	movs	r0, #0
 80010bc:	e015      	b.n	80010ea <HAL_RCC_OscConfig+0xae>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010be:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	689a      	ldr	r2, [r3, #8]
 80010c2:	f002 020c 	and.w	r2, r2, #12
 80010c6:	2a04      	cmp	r2, #4
 80010c8:	d007      	beq.n	80010da <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010d0:	2a08      	cmp	r2, #8
 80010d2:	d10c      	bne.n	80010ee <HAL_RCC_OscConfig+0xb2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	0254      	lsls	r4, r2, #9
 80010d8:	d509      	bpl.n	80010ee <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010da:	4b73      	ldr	r3, [pc, #460]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0398      	lsls	r0, r3, #14
 80010e0:	d5b1      	bpl.n	8001046 <HAL_RCC_OscConfig+0xa>
 80010e2:	684b      	ldr	r3, [r1, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1ae      	bne.n	8001046 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
}
 80010ea:	b002      	add	sp, #8
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ee:	684a      	ldr	r2, [r1, #4]
 80010f0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80010f4:	d112      	bne.n	800111c <HAL_RCC_OscConfig+0xe0>
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80010fc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010fe:	f7ff ff95 	bl	800102c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4d69      	ldr	r5, [pc, #420]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001104:	4e6a      	ldr	r6, [pc, #424]	; (80012b0 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8001106:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001108:	682b      	ldr	r3, [r5, #0]
 800110a:	039a      	lsls	r2, r3, #14
 800110c:	d49b      	bmi.n	8001046 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800110e:	f7ff ff8d 	bl	800102c <HAL_GetTick>
 8001112:	1b00      	subs	r0, r0, r4
 8001114:	42b0      	cmp	r0, r6
 8001116:	d9f7      	bls.n	8001108 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8001118:	2003      	movs	r0, #3
 800111a:	e7e6      	b.n	80010ea <HAL_RCC_OscConfig+0xae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111c:	4c62      	ldr	r4, [pc, #392]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 800111e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	d107      	bne.n	8001136 <HAL_RCC_OscConfig+0xfa>
 8001126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112a:	6023      	str	r3, [r4, #0]
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001132:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001134:	e7e3      	b.n	80010fe <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6023      	str	r3, [r4, #0]
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001144:	2a00      	cmp	r2, #0
 8001146:	d1da      	bne.n	80010fe <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8001148:	f7ff ff70 	bl	800102c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114c:	4e58      	ldr	r6, [pc, #352]	; (80012b0 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 800114e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	039b      	lsls	r3, r3, #14
 8001154:	f57f af77 	bpl.w	8001046 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff ff68 	bl	800102c <HAL_GetTick>
 800115c:	1b40      	subs	r0, r0, r5
 800115e:	42b0      	cmp	r0, r6
 8001160:	d9f6      	bls.n	8001150 <HAL_RCC_OscConfig+0x114>
 8001162:	e7d9      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001164:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	f012 0f0c 	tst.w	r2, #12
 800116c:	d007      	beq.n	800117e <HAL_RCC_OscConfig+0x142>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001174:	2a08      	cmp	r2, #8
 8001176:	d116      	bne.n	80011a6 <HAL_RCC_OscConfig+0x16a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	0258      	lsls	r0, r3, #9
 800117c:	d413      	bmi.n	80011a6 <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	484a      	ldr	r0, [pc, #296]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
 8001180:	6803      	ldr	r3, [r0, #0]
 8001182:	079a      	lsls	r2, r3, #30
 8001184:	d502      	bpl.n	800118c <HAL_RCC_OscConfig+0x150>
 8001186:	68cb      	ldr	r3, [r1, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d1ad      	bne.n	80010e8 <HAL_RCC_OscConfig+0xac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	6804      	ldr	r4, [r0, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	23f8      	movs	r3, #248	; 0xf8
 8001190:	fa93 f3a3 	rbit	r3, r3
 8001194:	fab3 f283 	clz	r2, r3
 8001198:	690b      	ldr	r3, [r1, #16]
 800119a:	4093      	lsls	r3, r2
 800119c:	f024 02f8 	bic.w	r2, r4, #248	; 0xf8
 80011a0:	4313      	orrs	r3, r2
 80011a2:	6003      	str	r3, [r0, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a4:	e753      	b.n	800104e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011a6:	68ca      	ldr	r2, [r1, #12]
 80011a8:	4b42      	ldr	r3, [pc, #264]	; (80012b4 <HAL_RCC_OscConfig+0x278>)
 80011aa:	b1da      	cbz	r2, 80011e4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011b0:	f7ff ff3c 	bl	800102c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	4c3c      	ldr	r4, [pc, #240]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 80011b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	079b      	lsls	r3, r3, #30
 80011bc:	d50c      	bpl.n	80011d8 <HAL_RCC_OscConfig+0x19c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	6820      	ldr	r0, [r4, #0]
 80011c0:	23f8      	movs	r3, #248	; 0xf8
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	fab3 f283 	clz	r2, r3
 80011ca:	690b      	ldr	r3, [r1, #16]
 80011cc:	4093      	lsls	r3, r2
 80011ce:	f020 02f8 	bic.w	r2, r0, #248	; 0xf8
 80011d2:	4313      	orrs	r3, r2
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	e73a      	b.n	800104e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff ff28 	bl	800102c <HAL_GetTick>
 80011dc:	1b40      	subs	r0, r0, r5
 80011de:	2802      	cmp	r0, #2
 80011e0:	d9ea      	bls.n	80011b8 <HAL_RCC_OscConfig+0x17c>
 80011e2:	e799      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
        __HAL_RCC_HSI_DISABLE();
 80011e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011e6:	f7ff ff21 	bl	800102c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	4d2f      	ldr	r5, [pc, #188]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
        tickstart = HAL_GetTick();
 80011ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	682b      	ldr	r3, [r5, #0]
 80011f0:	079e      	lsls	r6, r3, #30
 80011f2:	f57f af2c 	bpl.w	800104e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011f6:	f7ff ff19 	bl	800102c <HAL_GetTick>
 80011fa:	1b00      	subs	r0, r0, r4
 80011fc:	2802      	cmp	r0, #2
 80011fe:	d9f6      	bls.n	80011ee <HAL_RCC_OscConfig+0x1b2>
 8001200:	e78a      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001202:	694a      	ldr	r2, [r1, #20]
 8001204:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <HAL_RCC_OscConfig+0x278>)
 8001206:	b182      	cbz	r2, 800122a <HAL_RCC_OscConfig+0x1ee>
      __HAL_RCC_LSI_ENABLE();
 8001208:	2201      	movs	r2, #1
 800120a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800120e:	f7ff ff0d 	bl	800102c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001212:	4d25      	ldr	r5, [pc, #148]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8001214:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001218:	079b      	lsls	r3, r3, #30
 800121a:	f53f af1c 	bmi.w	8001056 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff ff05 	bl	800102c <HAL_GetTick>
 8001222:	1b00      	subs	r0, r0, r4
 8001224:	2802      	cmp	r0, #2
 8001226:	d9f6      	bls.n	8001216 <HAL_RCC_OscConfig+0x1da>
 8001228:	e776      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
      __HAL_RCC_LSI_DISABLE();
 800122a:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800122e:	f7ff fefd 	bl	800102c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001232:	4d1d      	ldr	r5, [pc, #116]	; (80012a8 <HAL_RCC_OscConfig+0x26c>)
      tickstart = HAL_GetTick();
 8001234:	4604      	mov	r4, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001236:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001238:	079e      	lsls	r6, r3, #30
 800123a:	f57f af0c 	bpl.w	8001056 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123e:	f7ff fef5 	bl	800102c <HAL_GetTick>
 8001242:	1b00      	subs	r0, r0, r4
 8001244:	2802      	cmp	r0, #2
 8001246:	d9f6      	bls.n	8001236 <HAL_RCC_OscConfig+0x1fa>
 8001248:	e766      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800124a:	f7ff feef 	bl	800102c <HAL_GetTick>
 800124e:	1b40      	subs	r0, r0, r5
 8001250:	2802      	cmp	r0, #2
 8001252:	f67f af17 	bls.w	8001084 <HAL_RCC_OscConfig+0x48>
 8001256:	e75f      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001258:	2b05      	cmp	r3, #5
 800125a:	d104      	bne.n	8001266 <HAL_RCC_OscConfig+0x22a>
 800125c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6723      	str	r3, [r4, #112]	; 0x70
 8001264:	e717      	b.n	8001096 <HAL_RCC_OscConfig+0x5a>
 8001266:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	6722      	str	r2, [r4, #112]	; 0x70
 800126e:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8001270:	f022 0204 	bic.w	r2, r2, #4
 8001274:	6722      	str	r2, [r4, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001276:	2b00      	cmp	r3, #0
 8001278:	f47f af11 	bne.w	800109e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 800127c:	f7ff fed6 	bl	800102c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001284:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001286:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8001288:	079b      	lsls	r3, r3, #30
 800128a:	f57f af12 	bpl.w	80010b2 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800128e:	f7ff fecd 	bl	800102c <HAL_GetTick>
 8001292:	1b40      	subs	r0, r0, r5
 8001294:	42b0      	cmp	r0, r6
 8001296:	d9f6      	bls.n	8001286 <HAL_RCC_OscConfig+0x24a>
 8001298:	e73e      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129a:	f7ff fec7 	bl	800102c <HAL_GetTick>
 800129e:	1b00      	subs	r0, r0, r4
 80012a0:	42b0      	cmp	r0, r6
 80012a2:	f67f af02 	bls.w	80010aa <HAL_RCC_OscConfig+0x6e>
 80012a6:	e737      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000
 80012b0:	05f5e100 	.word	0x05f5e100
 80012b4:	42470000 	.word	0x42470000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012b8:	4c2d      	ldr	r4, [pc, #180]	; (8001370 <HAL_RCC_OscConfig+0x334>)
 80012ba:	68a3      	ldr	r3, [r4, #8]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	f43f af11 	beq.w	80010e8 <HAL_RCC_OscConfig+0xac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <HAL_RCC_OscConfig+0x338>)
 80012c8:	2a02      	cmp	r2, #2
 80012ca:	f04f 0200 	mov.w	r2, #0
        __HAL_RCC_PLL_DISABLE();
 80012ce:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d0:	d140      	bne.n	8001354 <HAL_RCC_OscConfig+0x318>
        tickstart = HAL_GetTick();
 80012d2:	f7ff feab 	bl	800102c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d6:	4e28      	ldr	r6, [pc, #160]	; (8001378 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 80012d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	0198      	lsls	r0, r3, #6
 80012de:	d433      	bmi.n	8001348 <HAL_RCC_OscConfig+0x30c>
 80012e0:	f647 76c0 	movw	r6, #32704	; 0x7fc0
 80012e4:	fa96 f6a6 	rbit	r6, r6
 80012e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012ec:	fab6 f686 	clz	r6, r6
 80012f0:	fa92 f2a2 	rbit	r2, r2
 80012f4:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 80012f8:	fab2 f582 	clz	r5, r2
 80012fc:	fa90 f0a0 	rbit	r0, r0
 8001300:	e9d1 3207 	ldrd	r3, r2, [r1, #28]
 8001304:	4313      	orrs	r3, r2
 8001306:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8001308:	40b2      	lsls	r2, r6
 800130a:	4313      	orrs	r3, r2
 800130c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 800130e:	0852      	lsrs	r2, r2, #1
 8001310:	3a01      	subs	r2, #1
 8001312:	40aa      	lsls	r2, r5
 8001314:	4313      	orrs	r3, r2
 8001316:	6aca      	ldr	r2, [r1, #44]	; 0x2c
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001318:	4d17      	ldr	r5, [pc, #92]	; (8001378 <HAL_RCC_OscConfig+0x33c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800131a:	fab0 f080 	clz	r0, r0
 800131e:	fa02 f000 	lsl.w	r0, r2, r0
 8001322:	4303      	orrs	r3, r0
 8001324:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_RCC_OscConfig+0x338>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001328:	4c11      	ldr	r4, [pc, #68]	; (8001370 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_ENABLE();
 800132a:	2201      	movs	r2, #1
 800132c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800132e:	f7ff fe7d 	bl	800102c <HAL_GetTick>
 8001332:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	019a      	lsls	r2, r3, #6
 8001338:	f53f aebf 	bmi.w	80010ba <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fe76 	bl	800102c <HAL_GetTick>
 8001340:	1a40      	subs	r0, r0, r1
 8001342:	42a8      	cmp	r0, r5
 8001344:	d9f6      	bls.n	8001334 <HAL_RCC_OscConfig+0x2f8>
 8001346:	e6e7      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fe70 	bl	800102c <HAL_GetTick>
 800134c:	1b40      	subs	r0, r0, r5
 800134e:	42b0      	cmp	r0, r6
 8001350:	d9c3      	bls.n	80012da <HAL_RCC_OscConfig+0x29e>
 8001352:	e6e1      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
        tickstart = HAL_GetTick();
 8001354:	f7ff fe6a 	bl	800102c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001358:	4d07      	ldr	r5, [pc, #28]	; (8001378 <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 800135a:	4601      	mov	r1, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800135c:	6823      	ldr	r3, [r4, #0]
 800135e:	019b      	lsls	r3, r3, #6
 8001360:	f57f aeab 	bpl.w	80010ba <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fe62 	bl	800102c <HAL_GetTick>
 8001368:	1a40      	subs	r0, r0, r1
 800136a:	42a8      	cmp	r0, r5
 800136c:	d9f6      	bls.n	800135c <HAL_RCC_OscConfig+0x320>
 800136e:	e6d3      	b.n	8001118 <HAL_RCC_OscConfig+0xdc>
 8001370:	40023800 	.word	0x40023800
 8001374:	42470000 	.word	0x42470000
 8001378:	001e8480 	.word	0x001e8480

0800137c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800137c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800137e:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <HAL_RCC_ClockConfig+0x128>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	f002 020f 	and.w	r2, r2, #15
 8001386:	428a      	cmp	r2, r1
{
 8001388:	4604      	mov	r4, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800138a:	d31a      	bcc.n	80013c2 <HAL_RCC_ClockConfig+0x46>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800138c:	6822      	ldr	r2, [r4, #0]
 800138e:	0790      	lsls	r0, r2, #30
 8001390:	d420      	bmi.n	80013d4 <HAL_RCC_ClockConfig+0x58>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001392:	07d2      	lsls	r2, r2, #31
 8001394:	d426      	bmi.n	80013e4 <HAL_RCC_ClockConfig+0x68>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001396:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <HAL_RCC_ClockConfig+0x128>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f002 020f 	and.w	r2, r2, #15
 800139e:	428a      	cmp	r2, r1
 80013a0:	d870      	bhi.n	8001484 <HAL_RCC_ClockConfig+0x108>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a2:	6820      	ldr	r0, [r4, #0]
 80013a4:	0743      	lsls	r3, r0, #29
 80013a6:	d475      	bmi.n	8001494 <HAL_RCC_ClockConfig+0x118>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	f010 0008 	ands.w	r0, r0, #8
 80013ac:	d011      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x56>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <HAL_RCC_ClockConfig+0x12c>)
 80013b0:	6921      	ldr	r1, [r4, #16]
 80013b2:	6893      	ldr	r3, [r2, #8]
 80013b4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80013b8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013bc:	6093      	str	r3, [r2, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 80013be:	2000      	movs	r0, #0
 80013c0:	e007      	b.n	80013d2 <HAL_RCC_ClockConfig+0x56>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	b2ca      	uxtb	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	428b      	cmp	r3, r1
 80013ce:	d0dd      	beq.n	800138c <HAL_RCC_ClockConfig+0x10>
      return HAL_ERROR;
 80013d0:	2001      	movs	r0, #1
}
 80013d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d4:	4834      	ldr	r0, [pc, #208]	; (80014a8 <HAL_RCC_ClockConfig+0x12c>)
 80013d6:	68a5      	ldr	r5, [r4, #8]
 80013d8:	6883      	ldr	r3, [r0, #8]
 80013da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013de:	432b      	orrs	r3, r5
 80013e0:	6083      	str	r3, [r0, #8]
 80013e2:	e7d6      	b.n	8001392 <HAL_RCC_ClockConfig+0x16>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013e4:	6862      	ldr	r2, [r4, #4]
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <HAL_RCC_ClockConfig+0x12c>)
 80013e8:	2a01      	cmp	r2, #1
 80013ea:	d11d      	bne.n	8001428 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f2:	d0ed      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x54>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013f4:	4d2c      	ldr	r5, [pc, #176]	; (80014a8 <HAL_RCC_ClockConfig+0x12c>)
 80013f6:	68ab      	ldr	r3, [r5, #8]
 80013f8:	f023 0303 	bic.w	r3, r3, #3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001400:	f7ff fe14 	bl	800102c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001404:	6863      	ldr	r3, [r4, #4]
 8001406:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001408:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140a:	f241 3788 	movw	r7, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140e:	d115      	bne.n	800143c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001410:	68ab      	ldr	r3, [r5, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b04      	cmp	r3, #4
 8001418:	d0bd      	beq.n	8001396 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800141a:	f7ff fe07 	bl	800102c <HAL_GetTick>
 800141e:	1b80      	subs	r0, r0, r6
 8001420:	42b8      	cmp	r0, r7
 8001422:	d9f5      	bls.n	8001410 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
 8001426:	e7d4      	b.n	80013d2 <HAL_RCC_ClockConfig+0x56>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001428:	1e90      	subs	r0, r2, #2
 800142a:	2801      	cmp	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800142c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800142e:	d802      	bhi.n	8001436 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001430:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001434:	e7dd      	b.n	80013f2 <HAL_RCC_ClockConfig+0x76>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001436:	f013 0f02 	tst.w	r3, #2
 800143a:	e7da      	b.n	80013f2 <HAL_RCC_ClockConfig+0x76>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143c:	2b02      	cmp	r3, #2
 800143e:	d10a      	bne.n	8001456 <HAL_RCC_ClockConfig+0xda>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001440:	68ab      	ldr	r3, [r5, #8]
 8001442:	f003 030c 	and.w	r3, r3, #12
 8001446:	2b08      	cmp	r3, #8
 8001448:	d0a5      	beq.n	8001396 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800144a:	f7ff fdef 	bl	800102c <HAL_GetTick>
 800144e:	1b80      	subs	r0, r0, r6
 8001450:	42b8      	cmp	r0, r7
 8001452:	d9f5      	bls.n	8001440 <HAL_RCC_ClockConfig+0xc4>
 8001454:	e7e6      	b.n	8001424 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001456:	2b03      	cmp	r3, #3
 8001458:	d10f      	bne.n	800147a <HAL_RCC_ClockConfig+0xfe>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 800145a:	68ab      	ldr	r3, [r5, #8]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b0c      	cmp	r3, #12
 8001462:	d098      	beq.n	8001396 <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001464:	f7ff fde2 	bl	800102c <HAL_GetTick>
 8001468:	1b80      	subs	r0, r0, r6
 800146a:	42b8      	cmp	r0, r7
 800146c:	d9f5      	bls.n	800145a <HAL_RCC_ClockConfig+0xde>
 800146e:	e7d9      	b.n	8001424 <HAL_RCC_ClockConfig+0xa8>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff fddc 	bl	800102c <HAL_GetTick>
 8001474:	1b80      	subs	r0, r0, r6
 8001476:	42b8      	cmp	r0, r7
 8001478:	d8d4      	bhi.n	8001424 <HAL_RCC_ClockConfig+0xa8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800147a:	68ab      	ldr	r3, [r5, #8]
 800147c:	f013 0f0c 	tst.w	r3, #12
 8001480:	d1f6      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf4>
 8001482:	e788      	b.n	8001396 <HAL_RCC_ClockConfig+0x1a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001484:	b2ca      	uxtb	r2, r1
 8001486:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	428b      	cmp	r3, r1
 8001490:	d19e      	bne.n	80013d0 <HAL_RCC_ClockConfig+0x54>
 8001492:	e786      	b.n	80013a2 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001494:	4904      	ldr	r1, [pc, #16]	; (80014a8 <HAL_RCC_ClockConfig+0x12c>)
 8001496:	68e3      	ldr	r3, [r4, #12]
 8001498:	688a      	ldr	r2, [r1, #8]
 800149a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800149e:	431a      	orrs	r2, r3
 80014a0:	608a      	str	r2, [r1, #8]
 80014a2:	e781      	b.n	80013a8 <HAL_RCC_ClockConfig+0x2c>
 80014a4:	40023c00 	.word	0x40023c00
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b0:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001668 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b4:	4a6d      	ldr	r2, [pc, #436]	; (800166c <HAL_GPIO_Init+0x1c0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014b6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8001670 <HAL_GPIO_Init+0x1c4>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014bc:	680c      	ldr	r4, [r1, #0]
    ioposition = 0x01U << position;
 80014be:	2701      	movs	r7, #1
 80014c0:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 80014c6:	ea37 0404 	bics.w	r4, r7, r4
 80014ca:	f040 80b9 	bne.w	8001640 <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ce:	684c      	ldr	r4, [r1, #4]
 80014d0:	f024 0a10 	bic.w	sl, r4, #16
 80014d4:	f1ba 0f02 	cmp.w	sl, #2
 80014d8:	d116      	bne.n	8001508 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 80014da:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80014de:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e2:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80014e6:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80014ee:	f04f 0c0f 	mov.w	ip, #15
 80014f2:	fa0c fc0b 	lsl.w	ip, ip, fp
 80014f6:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014fa:	690e      	ldr	r6, [r1, #16]
 80014fc:	fa06 f60b 	lsl.w	r6, r6, fp
 8001500:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001504:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8001508:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800150c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001510:	f04f 0c03 	mov.w	ip, #3
 8001514:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001518:	ea2b 0b0c 	bic.w	fp, fp, ip
 800151c:	ea6f 060c 	mvn.w	r6, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001520:	f004 0c03 	and.w	ip, r4, #3
 8001524:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001528:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001530:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8001534:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001538:	d816      	bhi.n	8001568 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR;
 800153a:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153e:	f8d1 a00c 	ldr.w	sl, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001542:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001546:	fa0a fa0e 	lsl.w	sl, sl, lr
 800154a:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 800154e:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8001552:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001556:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800155a:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 800155e:	fa0c fc03 	lsl.w	ip, ip, r3
 8001562:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8001566:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001568:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156a:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800156c:	688e      	ldr	r6, [r1, #8]
 800156e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001572:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8001574:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001576:	00e6      	lsls	r6, r4, #3
 8001578:	d562      	bpl.n	8001640 <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2600      	movs	r6, #0
 800157c:	9601      	str	r6, [sp, #4]
 800157e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001582:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001586:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800158a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800158e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001592:	9701      	str	r7, [sp, #4]
 8001594:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001596:	f023 0703 	bic.w	r7, r3, #3
 800159a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800159e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015a2:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015aa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80015ae:	f04f 0c0f 	mov.w	ip, #15
 80015b2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80015b6:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ba:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001674 <HAL_GPIO_Init+0x1c8>
 80015be:	4550      	cmp	r0, sl
 80015c0:	d01d      	beq.n	80015fe <HAL_GPIO_Init+0x152>
 80015c2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80015c6:	f506 3601 	add.w	r6, r6, #132096	; 0x20400
 80015ca:	42b0      	cmp	r0, r6
 80015cc:	d03f      	beq.n	800164e <HAL_GPIO_Init+0x1a2>
 80015ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015d2:	42b0      	cmp	r0, r6
 80015d4:	d03d      	beq.n	8001652 <HAL_GPIO_Init+0x1a6>
 80015d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015da:	42b0      	cmp	r0, r6
 80015dc:	d03b      	beq.n	8001656 <HAL_GPIO_Init+0x1aa>
 80015de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015e2:	42b0      	cmp	r0, r6
 80015e4:	d039      	beq.n	800165a <HAL_GPIO_Init+0x1ae>
 80015e6:	4548      	cmp	r0, r9
 80015e8:	d039      	beq.n	800165e <HAL_GPIO_Init+0x1b2>
 80015ea:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80015ee:	42b0      	cmp	r0, r6
 80015f0:	d037      	beq.n	8001662 <HAL_GPIO_Init+0x1b6>
 80015f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80015f6:	42b0      	cmp	r0, r6
 80015f8:	bf0c      	ite	eq
 80015fa:	2607      	moveq	r6, #7
 80015fc:	2608      	movne	r6, #8
 80015fe:	fa06 f60e 	lsl.w	r6, r6, lr
 8001602:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001606:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001608:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800160a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001610:	bf0c      	ite	eq
 8001612:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001614:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8001616:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8001618:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800161e:	bf0c      	ite	eq
 8001620:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001622:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8001624:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001626:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001628:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800162c:	bf0c      	ite	eq
 800162e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8001630:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8001632:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8001634:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001636:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001638:	bf54      	ite	pl
 800163a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 800163c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800163e:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001640:	3301      	adds	r3, #1
 8001642:	2b10      	cmp	r3, #16
 8001644:	f47f af3a 	bne.w	80014bc <HAL_GPIO_Init+0x10>
      }
    }
  }
}
 8001648:	b003      	add	sp, #12
 800164a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800164e:	2601      	movs	r6, #1
 8001650:	e7d5      	b.n	80015fe <HAL_GPIO_Init+0x152>
 8001652:	2602      	movs	r6, #2
 8001654:	e7d3      	b.n	80015fe <HAL_GPIO_Init+0x152>
 8001656:	2603      	movs	r6, #3
 8001658:	e7d1      	b.n	80015fe <HAL_GPIO_Init+0x152>
 800165a:	2604      	movs	r6, #4
 800165c:	e7cf      	b.n	80015fe <HAL_GPIO_Init+0x152>
 800165e:	2605      	movs	r6, #5
 8001660:	e7cd      	b.n	80015fe <HAL_GPIO_Init+0x152>
 8001662:	2606      	movs	r6, #6
 8001664:	e7cb      	b.n	80015fe <HAL_GPIO_Init+0x152>
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40013c00 	.word	0x40013c00
 8001670:	40021400 	.word	0x40021400
 8001674:	40020000 	.word	0x40020000

08001678 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001678:	b10a      	cbz	r2, 800167e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167a:	6181      	str	r1, [r0, #24]
  }
}
 800167c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800167e:	0409      	lsls	r1, r1, #16
 8001680:	e7fb      	b.n	800167a <HAL_GPIO_WritePin+0x2>
 8001682:	0000      	movs	r0, r0

08001684 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001684:	b570      	push	{r4, r5, r6, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001686:	2800      	cmp	r0, #0
 8001688:	d067      	beq.n	800175a <HAL_UART_Init+0xd6>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 800168a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800168e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001692:	b90b      	cbnz	r3, 8001698 <HAL_UART_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001694:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001698:	6801      	ldr	r1, [r0, #0]
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800169a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800169c:	6905      	ldr	r5, [r0, #16]
 800169e:	69c4      	ldr	r4, [r0, #28]
  huart->gState = HAL_UART_STATE_BUSY;
 80016a0:	2324      	movs	r3, #36	; 0x24
 80016a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80016a6:	68cb      	ldr	r3, [r1, #12]
 80016a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016ac:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR2;
 80016ae:	690b      	ldr	r3, [r1, #16]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80016b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80016b4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80016b6:	610b      	str	r3, [r1, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016b8:	6883      	ldr	r3, [r0, #8]
  tmpreg = huart->Instance->CR1;
 80016ba:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016bc:	432b      	orrs	r3, r5
 80016be:	6945      	ldr	r5, [r0, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80016c0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016c4:	432b      	orrs	r3, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80016c6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80016ca:	4323      	orrs	r3, r4
 80016cc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80016ce:	60cb      	str	r3, [r1, #12]
  tmpreg = huart->Instance->CR3;
 80016d0:	694b      	ldr	r3, [r1, #20]
  tmpreg |= huart->Init.HwFlowCtl;
 80016d2:	6982      	ldr	r2, [r0, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80016d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80016d8:	4313      	orrs	r3, r2
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016da:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80016de:	614b      	str	r3, [r1, #20]
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016e0:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_UART_Init+0xdc>)
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016e2:	6843      	ldr	r3, [r0, #4]
 80016e4:	f04f 0564 	mov.w	r5, #100	; 0x64
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016e8:	d128      	bne.n	800173c <HAL_UART_Init+0xb8>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80016f0:	fbb2 f6f5 	udiv	r6, r2, r5
 80016f4:	fb05 2216 	mls	r2, r5, r6, r2
 80016f8:	00d3      	lsls	r3, r2, #3
 80016fa:	3332      	adds	r3, #50	; 0x32
 80016fc:	fbb3 f3f5 	udiv	r3, r3, r5
 8001700:	f003 0207 	and.w	r2, r3, #7
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	eb02 1206 	add.w	r2, r2, r6, lsl #4
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800170a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800170e:	4413      	add	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  UART_SetConfig(huart);

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001712:	690b      	ldr	r3, [r1, #16]
 8001714:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001718:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800171a:	694b      	ldr	r3, [r1, #20]
 800171c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001720:	614b      	str	r3, [r1, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001722:	68cb      	ldr	r3, [r1, #12]
 8001724:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001728:	60cb      	str	r3, [r1, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
 800172a:	2220      	movs	r2, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800172c:	2300      	movs	r3, #0
 800172e:	63c3      	str	r3, [r0, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001730:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001734:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

  return HAL_OK;
 8001738:	4618      	mov	r0, r3
}
 800173a:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001742:	fbb2 f6f5 	udiv	r6, r2, r5
 8001746:	fb05 2316 	mls	r3, r5, r6, r2
 800174a:	011b      	lsls	r3, r3, #4
 800174c:	3332      	adds	r3, #50	; 0x32
 800174e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001752:	eb03 1306 	add.w	r3, r3, r6, lsl #4
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001756:	608b      	str	r3, [r1, #8]
 8001758:	e7db      	b.n	8001712 <HAL_UART_Init+0x8e>
    return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
 800175c:	e7ed      	b.n	800173a <HAL_UART_Init+0xb6>
 800175e:	bf00      	nop
 8001760:	0afb6e90 	.word	0x0afb6e90

08001764 <HAL_UART_Transmit>:
{
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001764:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001768:	2b20      	cmp	r3, #32
 800176a:	d13e      	bne.n	80017ea <HAL_UART_Transmit+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 800176c:	2900      	cmp	r1, #0
 800176e:	d03a      	beq.n	80017e6 <HAL_UART_Transmit+0x82>
 8001770:	2a00      	cmp	r2, #0
 8001772:	d038      	beq.n	80017e6 <HAL_UART_Transmit+0x82>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001774:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001778:	2b01      	cmp	r3, #1
 800177a:	d036      	beq.n	80017ea <HAL_UART_Transmit+0x86>
 800177c:	2301      	movs	r3, #1
 800177e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001786:	2321      	movs	r3, #33	; 0x21
 8001788:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 800178c:	6803      	ldr	r3, [r0, #0]

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 800178e:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8001790:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001792:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 8001794:	b292      	uxth	r2, r2
 8001796:	b952      	cbnz	r2, 80017ae <HAL_UART_Transmit+0x4a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	0652      	lsls	r2, r2, #25
 800179c:	d5fc      	bpl.n	8001798 <HAL_UART_Transmit+0x34>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 800179e:	2320      	movs	r3, #32
 80017a0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80017a4:	2300      	movs	r3, #0
 80017a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 80017aa:	4618      	mov	r0, r3
 80017ac:	4770      	bx	lr
      huart->TxXferCount--;
 80017ae:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 80017b0:	3a01      	subs	r2, #1
 80017b2:	b292      	uxth	r2, r2
 80017b4:	84c2      	strh	r2, [r0, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017b6:	6882      	ldr	r2, [r0, #8]
 80017b8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80017bc:	d10c      	bne.n	80017d8 <HAL_UART_Transmit+0x74>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	0612      	lsls	r2, r2, #24
 80017c2:	d5fc      	bpl.n	80017be <HAL_UART_Transmit+0x5a>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80017c4:	880a      	ldrh	r2, [r1, #0]
 80017c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017ca:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80017cc:	6902      	ldr	r2, [r0, #16]
 80017ce:	b90a      	cbnz	r2, 80017d4 <HAL_UART_Transmit+0x70>
          pData +=2U;
 80017d0:	3102      	adds	r1, #2
 80017d2:	e7de      	b.n	8001792 <HAL_UART_Transmit+0x2e>
          pData +=1U;
 80017d4:	3101      	adds	r1, #1
 80017d6:	e7dc      	b.n	8001792 <HAL_UART_Transmit+0x2e>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	0612      	lsls	r2, r2, #24
 80017dc:	d5fc      	bpl.n	80017d8 <HAL_UART_Transmit+0x74>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80017de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	e7d5      	b.n	8001792 <HAL_UART_Transmit+0x2e>
      return  HAL_ERROR;
 80017e6:	2001      	movs	r0, #1
 80017e8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80017ea:	2002      	movs	r0, #2
  }
}
 80017ec:	4770      	bx	lr

080017ee <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017ee:	b510      	push	{r4, lr}
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80017f0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80017f4:	2b20      	cmp	r3, #32
 80017f6:	d144      	bne.n	8001882 <HAL_UART_Receive+0x94>
  {
    if((pData == NULL ) || (Size == 0))
 80017f8:	2900      	cmp	r1, #0
 80017fa:	d040      	beq.n	800187e <HAL_UART_Receive+0x90>
 80017fc:	2a00      	cmp	r2, #0
 80017fe:	d03e      	beq.n	800187e <HAL_UART_Receive+0x90>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001800:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001804:	2b01      	cmp	r3, #1
 8001806:	d03c      	beq.n	8001882 <HAL_UART_Receive+0x94>
 8001808:	2301      	movs	r3, #1
 800180a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800180e:	2300      	movs	r3, #0
 8001810:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001812:	2322      	movs	r3, #34	; 0x22
 8001814:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8001818:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800181a:	85c2      	strh	r2, [r0, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 800181c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800181e:	b29b      	uxth	r3, r3
 8001820:	b933      	cbnz	r3, 8001830 <HAL_UART_Receive+0x42>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001822:	2220      	movs	r2, #32
 8001824:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001828:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    return HAL_OK;
 800182c:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800182e:	bd10      	pop	{r4, pc}
      huart->RxXferCount--;
 8001830:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8001832:	6802      	ldr	r2, [r0, #0]
      huart->RxXferCount--;
 8001834:	3b01      	subs	r3, #1
 8001836:	b29b      	uxth	r3, r3
 8001838:	85c3      	strh	r3, [r0, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800183a:	6883      	ldr	r3, [r0, #8]
 800183c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001840:	d111      	bne.n	8001866 <HAL_UART_Receive+0x78>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8001842:	6813      	ldr	r3, [r2, #0]
 8001844:	069c      	lsls	r4, r3, #26
 8001846:	d5fc      	bpl.n	8001842 <HAL_UART_Receive+0x54>
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001848:	6903      	ldr	r3, [r0, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800184a:	6852      	ldr	r2, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800184c:	b933      	cbnz	r3, 800185c <HAL_UART_Receive+0x6e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800184e:	460b      	mov	r3, r1
 8001850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001854:	f823 2b02 	strh.w	r2, [r3], #2
{
 8001858:	4619      	mov	r1, r3
 800185a:	e7df      	b.n	800181c <HAL_UART_Receive+0x2e>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800185c:	460b      	mov	r3, r1
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	f823 2b01 	strh.w	r2, [r3], #1
          pData +=1U;
 8001864:	e7f8      	b.n	8001858 <HAL_UART_Receive+0x6a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8001866:	6813      	ldr	r3, [r2, #0]
 8001868:	069b      	lsls	r3, r3, #26
 800186a:	d5fc      	bpl.n	8001866 <HAL_UART_Receive+0x78>
        if(huart->Init.Parity == UART_PARITY_NONE)
 800186c:	6904      	ldr	r4, [r0, #16]
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800186e:	6852      	ldr	r2, [r2, #4]
          pData +=1U;
 8001870:	1c4b      	adds	r3, r1, #1
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001872:	b90c      	cbnz	r4, 8001878 <HAL_UART_Receive+0x8a>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001874:	700a      	strb	r2, [r1, #0]
 8001876:	e7ef      	b.n	8001858 <HAL_UART_Receive+0x6a>
 8001878:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800187c:	e7fa      	b.n	8001874 <HAL_UART_Receive+0x86>
      return  HAL_ERROR;
 800187e:	2001      	movs	r0, #1
 8001880:	e7d5      	b.n	800182e <HAL_UART_Receive+0x40>
    return HAL_BUSY;
 8001882:	2002      	movs	r0, #2
 8001884:	e7d3      	b.n	800182e <HAL_UART_Receive+0x40>
 8001886:	0000      	movs	r0, r0

08001888 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <_sbrk+0x2c>)
 800188a:	6811      	ldr	r1, [r2, #0]
{
 800188c:	b508      	push	{r3, lr}
 800188e:	4603      	mov	r3, r0
	if (heap_end == 0)
 8001890:	b909      	cbnz	r1, 8001896 <_sbrk+0xe>
		heap_end = &end;
 8001892:	4909      	ldr	r1, [pc, #36]	; (80018b8 <_sbrk+0x30>)
 8001894:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
 8001896:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001898:	4669      	mov	r1, sp
 800189a:	4403      	add	r3, r0
 800189c:	428b      	cmp	r3, r1
 800189e:	d906      	bls.n	80018ae <_sbrk+0x26>
	{
		errno = ENOMEM;
 80018a0:	f7fe fcbc 	bl	800021c <__errno>
 80018a4:	230c      	movs	r3, #12
 80018a6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80018ac:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80018ae:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 80018b0:	e7fc      	b.n	80018ac <_sbrk+0x24>
 80018b2:	bf00      	nop
 80018b4:	20000c20 	.word	0x20000c20
 80018b8:	20000d28 	.word	0x20000d28

080018bc <HAL_RNG_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 80018bc:	4770      	bx	lr

080018be <HAL_RNG_Init>:
{ 
 80018be:	b510      	push	{r4, lr}
  if(hrng == NULL)
 80018c0:	4604      	mov	r4, r0
 80018c2:	b1a8      	cbz	r0, 80018f0 <HAL_RNG_Init+0x32>
  __HAL_LOCK(hrng);
 80018c4:	7903      	ldrb	r3, [r0, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d014      	beq.n	80018f4 <HAL_RNG_Init+0x36>
  if(hrng->State == HAL_RNG_STATE_RESET)
 80018ca:	7943      	ldrb	r3, [r0, #5]
 80018cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80018d0:	b913      	cbnz	r3, 80018d8 <HAL_RNG_Init+0x1a>
    hrng->Lock = HAL_UNLOCKED;
 80018d2:	7102      	strb	r2, [r0, #4]
    HAL_RNG_MspInit(hrng);
 80018d4:	f7ff fff2 	bl	80018bc <HAL_RNG_MspInit>
  __HAL_RNG_ENABLE(hrng);
 80018d8:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80018da:	2302      	movs	r3, #2
 80018dc:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80018de:	6813      	ldr	r3, [r2, #0]
 80018e0:	f043 0304 	orr.w	r3, r3, #4
 80018e4:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hrng);
 80018e6:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_READY;
 80018e8:	2301      	movs	r3, #1
 80018ea:	7163      	strb	r3, [r4, #5]
  __HAL_UNLOCK(hrng);
 80018ec:	7120      	strb	r0, [r4, #4]
}
 80018ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018f0:	2001      	movs	r0, #1
 80018f2:	e7fc      	b.n	80018ee <HAL_RNG_Init+0x30>
  __HAL_LOCK(hrng);
 80018f4:	2002      	movs	r0, #2
 80018f6:	e7fa      	b.n	80018ee <HAL_RNG_Init+0x30>

080018f8 <KeyExpansion>:
  return sbox[num];
}

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
static void KeyExpansion(void)
{
 80018f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80018fa:	4a27      	ldr	r2, [pc, #156]	; (8001998 <KeyExpansion+0xa0>)
 80018fc:	f852 3b04 	ldr.w	r3, [r2], #4
 8001900:	f103 0110 	add.w	r1, r3, #16
  uint8_t tempa[4]; // Used for the column/row operations

  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8001904:	7818      	ldrb	r0, [r3, #0]
 8001906:	7010      	strb	r0, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8001908:	7858      	ldrb	r0, [r3, #1]
 800190a:	7050      	strb	r0, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 800190c:	7898      	ldrb	r0, [r3, #2]
 800190e:	7090      	strb	r0, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8001910:	78d8      	ldrb	r0, [r3, #3]
 8001912:	70d0      	strb	r0, [r2, #3]
  for (i = 0; i < Nk; ++i)
 8001914:	3304      	adds	r3, #4
 8001916:	428b      	cmp	r3, r1
 8001918:	f102 0204 	add.w	r2, r2, #4
 800191c:	d1f2      	bne.n	8001904 <KeyExpansion+0xc>
 800191e:	4b1f      	ldr	r3, [pc, #124]	; (800199c <KeyExpansion+0xa4>)
  return sbox[num];
 8001920:	481f      	ldr	r0, [pc, #124]	; (80019a0 <KeyExpansion+0xa8>)
  for (i = 0; i < Nk; ++i)
 8001922:	2104      	movs	r1, #4
  }

  // All other round keys are found from the previous round keys.
  for (; (i < (Nb * (Nr + 1))); ++i)
  {
    for (j = 0; j < 4; ++j)
 8001924:	681a      	ldr	r2, [r3, #0]
    {
      tempa[j] = RoundKey[(i - 1) * 4 + j];
 8001926:	9201      	str	r2, [sp, #4]
    }
    if (i % Nk == 0)
 8001928:	078c      	lsls	r4, r1, #30
 800192a:	d116      	bne.n	800195a <KeyExpansion+0x62>
  return sbox[num];
 800192c:	f3c2 4507 	ubfx	r5, r2, #16, #8
 8001930:	f3c2 2407 	ubfx	r4, r2, #8, #8
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
        tempa[1] = getSBoxValue(tempa[1]);
 8001934:	5d45      	ldrb	r5, [r0, r5]
 8001936:	f88d 5005 	strb.w	r5, [sp, #5]
  return sbox[num];
 800193a:	0e15      	lsrs	r5, r2, #24
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	5d04      	ldrb	r4, [r0, r4]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
 8001940:	5c82      	ldrb	r2, [r0, r2]
 8001942:	f88d 2007 	strb.w	r2, [sp, #7]
      }

      tempa[0] = tempa[0] ^ Rcon[i / Nk];
 8001946:	eb00 0291 	add.w	r2, r0, r1, lsr #2
        tempa[2] = getSBoxValue(tempa[2]);
 800194a:	5d45      	ldrb	r5, [r0, r5]
      tempa[0] = tempa[0] ^ Rcon[i / Nk];
 800194c:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
        tempa[2] = getSBoxValue(tempa[2]);
 8001950:	f88d 5006 	strb.w	r5, [sp, #6]
      tempa[0] = tempa[0] ^ Rcon[i / Nk];
 8001954:	4062      	eors	r2, r4
 8001956:	f88d 2004 	strb.w	r2, [sp, #4]
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800195a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800195e:	f89d 4004 	ldrb.w	r4, [sp, #4]
 8001962:	4062      	eors	r2, r4
 8001964:	711a      	strb	r2, [r3, #4]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 8001966:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800196a:	f813 2c0b 	ldrb.w	r2, [r3, #-11]
 800196e:	4062      	eors	r2, r4
 8001970:	715a      	strb	r2, [r3, #5]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 8001972:	f89d 4006 	ldrb.w	r4, [sp, #6]
 8001976:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
 800197a:	4062      	eors	r2, r4
 800197c:	719a      	strb	r2, [r3, #6]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800197e:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8001982:	f813 2c09 	ldrb.w	r2, [r3, #-9]
  for (; (i < (Nb * (Nr + 1))); ++i)
 8001986:	3101      	adds	r1, #1
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8001988:	4062      	eors	r2, r4
  for (; (i < (Nb * (Nr + 1))); ++i)
 800198a:	292c      	cmp	r1, #44	; 0x2c
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800198c:	71da      	strb	r2, [r3, #7]
  for (; (i < (Nb * (Nr + 1))); ++i)
 800198e:	f103 0304 	add.w	r3, r3, #4
 8001992:	d1c7      	bne.n	8001924 <KeyExpansion+0x2c>
  }
}
 8001994:	b003      	add	sp, #12
 8001996:	bd30      	pop	{r4, r5, pc}
 8001998:	20000c24 	.word	0x20000c24
 800199c:	20000c34 	.word	0x20000c34
 80019a0:	20000000 	.word	0x20000000

080019a4 <AddRoundKey>:
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <AddRoundKey+0x30>)
{
 80019a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019a8:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 80019ac:	0100      	lsls	r0, r0, #4
 80019ae:	1d21      	adds	r1, r4, #4
 80019b0:	1d1a      	adds	r2, r3, #4
 80019b2:	3414      	adds	r4, #20
    for (j = 0; j < 4; ++j)
 80019b4:	1f0b      	subs	r3, r1, #4
 80019b6:	1816      	adds	r6, r2, r0
      (*state)[i][j] ^= RoundKey[round * Nb * 4 + i * Nb + j];
 80019b8:	781d      	ldrb	r5, [r3, #0]
 80019ba:	f816 7b01 	ldrb.w	r7, [r6], #1
 80019be:	407d      	eors	r5, r7
 80019c0:	f803 5b01 	strb.w	r5, [r3], #1
    for (j = 0; j < 4; ++j)
 80019c4:	428b      	cmp	r3, r1
 80019c6:	d1f7      	bne.n	80019b8 <AddRoundKey+0x14>
  for (i = 0; i < 4; ++i)
 80019c8:	1d19      	adds	r1, r3, #4
 80019ca:	42a1      	cmp	r1, r4
 80019cc:	f100 0004 	add.w	r0, r0, #4
 80019d0:	d1f0      	bne.n	80019b4 <AddRoundKey+0x10>
    }
  }
}
 80019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d4:	20000c24 	.word	0x20000c24

080019d8 <SubBytes>:
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
  {
    for (j = 0; j < 4; ++j)
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <SubBytes+0x28>)
  return sbox[num];
 80019da:	480a      	ldr	r0, [pc, #40]	; (8001a04 <SubBytes+0x2c>)
 80019dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
{
 80019e0:	b510      	push	{r4, lr}
 80019e2:	1d19      	adds	r1, r3, #4
 80019e4:	2200      	movs	r2, #0
  return sbox[num];
 80019e6:	f813 4022 	ldrb.w	r4, [r3, r2, lsl #2]
 80019ea:	5d04      	ldrb	r4, [r0, r4]
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 80019ec:	f803 4022 	strb.w	r4, [r3, r2, lsl #2]
    for (j = 0; j < 4; ++j)
 80019f0:	3201      	adds	r2, #1
 80019f2:	2a04      	cmp	r2, #4
 80019f4:	d1f7      	bne.n	80019e6 <SubBytes+0xe>
  for (i = 0; i < 4; ++i)
 80019f6:	3301      	adds	r3, #1
 80019f8:	428b      	cmp	r3, r1
 80019fa:	d1f3      	bne.n	80019e4 <SubBytes+0xc>
    }
  }
}
 80019fc:	bd10      	pop	{r4, pc}
 80019fe:	bf00      	nop
 8001a00:	20000c24 	.word	0x20000c24
 8001a04:	20000000 	.word	0x20000000

08001a08 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(void)
{
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t temp;
  state_copy = (state_t *)malloc(sizeof(state_t) * 16);
 8001a0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a0e:	f7fe fc45 	bl	800029c <malloc>

  // Randomize_permuation();

  for (temp = 0; temp < 16; ++temp)
  {
    (*state_copy)[temp % 4][temp / 4] = (*state)[temp % 4][temp / 4]; // NOTE: [column index][row index]
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <ShiftRows+0x5c>)
 8001a14:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f003 0203 	and.w	r2, r3, #3
 8001a1e:	f3c3 0185 	ubfx	r1, r3, #2, #6
 8001a22:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 8001a26:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  for (temp = 0; temp < 16; ++temp)
 8001a2a:	3301      	adds	r3, #1
    (*state_copy)[temp % 4][temp / 4] = (*state)[temp % 4][temp / 4]; // NOTE: [column index][row index]
 8001a2c:	5c52      	ldrb	r2, [r2, r1]
 8001a2e:	5462      	strb	r2, [r4, r1]
  for (temp = 0; temp < 16; ++temp)
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d1f2      	bne.n	8001a1a <ShiftRows+0x12>
 8001a34:	4e0c      	ldr	r6, [pc, #48]	; (8001a68 <ShiftRows+0x60>)
  }

  for (temp = 0; temp < 16; ++temp)
 8001a36:	2300      	movs	r3, #0
  {
    (*state)[temp % 4][temp / 4] = (*state_copy)[shift_rows[temp] % 4][shift_rows[temp] / 4];
 8001a38:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001a3c:	f002 0403 	and.w	r4, r2, #3
 8001a40:	f003 0103 	and.w	r1, r3, #3
 8001a44:	089f      	lsrs	r7, r3, #2
 8001a46:	0892      	lsrs	r2, r2, #2
 8001a48:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  for (temp = 0; temp < 16; ++temp)
 8001a4c:	3301      	adds	r3, #1
    (*state)[temp % 4][temp / 4] = (*state_copy)[shift_rows[temp] % 4][shift_rows[temp] / 4];
 8001a4e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
  for (temp = 0; temp < 16; ++temp)
 8001a52:	b2db      	uxtb	r3, r3
    (*state)[temp % 4][temp / 4] = (*state_copy)[shift_rows[temp] % 4][shift_rows[temp] / 4];
 8001a54:	5ca2      	ldrb	r2, [r4, r2]
 8001a56:	55ca      	strb	r2, [r1, r7]
  for (temp = 0; temp < 16; ++temp)
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d1ed      	bne.n	8001a38 <ShiftRows+0x30>
  (*state)[0][3] = (*state)[3][3];
  (*state)[3][3] = (*state)[2][3];
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
  */
}
 8001a5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  free(state_copy);
 8001a60:	f7fe bc24 	b.w	80002ac <free>
 8001a64:	20000c24 	.word	0x20000c24
 8001a68:	2000020b 	.word	0x2000020b

08001a6c <Cipher>:

#endif

// Cipher is the main function that encrypts the PlainText.
static void Cipher(void)
{
 8001a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint8_t round = 0;

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ff97 	bl	80019a4 <AddRoundKey>
    t = (*state)[i][0];
 8001a76:	4c2f      	ldr	r4, [pc, #188]	; (8001b34 <Cipher+0xc8>)

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 8001a78:	2501      	movs	r5, #1
  {
    SubBytes();
 8001a7a:	f7ff ffad 	bl	80019d8 <SubBytes>
    ShiftRows();
 8001a7e:	f7ff ffc3 	bl	8001a08 <ShiftRows>
  for (i = 0; i < 4; ++i)
 8001a82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8001a86:	f103 0610 	add.w	r6, r3, #16
    t = (*state)[i][0];
 8001a8a:	781a      	ldrb	r2, [r3, #0]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
 8001a8c:	7859      	ldrb	r1, [r3, #1]
 8001a8e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8001a92:	78d8      	ldrb	r0, [r3, #3]
 8001a94:	ea82 0901 	eor.w	r9, r2, r1
  return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8001a98:	ea4f 1cd9 	mov.w	ip, r9, lsr #7
 8001a9c:	ea8e 0800 	eor.w	r8, lr, r0
 8001aa0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3];
 8001aa4:	ea88 0709 	eor.w	r7, r8, r9
  return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8001aa8:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8001aac:	ea8c 0c49 	eor.w	ip, ip, r9, lsl #1
    (*state)[i][0] ^= Tm ^ Tmp;
 8001ab0:	ea82 0907 	eor.w	r9, r2, r7
 8001ab4:	ea8c 0c09 	eor.w	ip, ip, r9
    Tm = (*state)[i][1] ^ (*state)[i][2];
 8001ab8:	ea81 090e 	eor.w	r9, r1, lr
    (*state)[i][0] ^= Tm ^ Tmp;
 8001abc:	f883 c000 	strb.w	ip, [r3]
  return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8001ac0:	ea4f 1cd9 	mov.w	ip, r9, lsr #7
 8001ac4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8001ac8:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
    (*state)[i][1] ^= Tm ^ Tmp;
 8001acc:	4079      	eors	r1, r7
  return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8001ace:	ea8c 0c49 	eor.w	ip, ip, r9, lsl #1
    (*state)[i][1] ^= Tm ^ Tmp;
 8001ad2:	ea8c 0c01 	eor.w	ip, ip, r1
  return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8001ad6:	ea4f 11d8 	mov.w	r1, r8, lsr #7
 8001ada:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001ade:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8001ae2:	ea81 0148 	eor.w	r1, r1, r8, lsl #1
    (*state)[i][2] ^= Tm ^ Tmp;
 8001ae6:	ea8e 0e07 	eor.w	lr, lr, r7
 8001aea:	ea81 010e 	eor.w	r1, r1, lr
 8001aee:	7099      	strb	r1, [r3, #2]
    Tm = (*state)[i][3] ^ t;
 8001af0:	ea82 0100 	eor.w	r1, r2, r0
  return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
 8001af4:	09ca      	lsrs	r2, r1, #7
 8001af6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001afa:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8001afe:	ea82 0241 	eor.w	r2, r2, r1, lsl #1
    (*state)[i][3] ^= Tm ^ Tmp;
 8001b02:	4078      	eors	r0, r7
 8001b04:	4042      	eors	r2, r0
    (*state)[i][1] ^= Tm ^ Tmp;
 8001b06:	f883 c001 	strb.w	ip, [r3, #1]
    (*state)[i][3] ^= Tm ^ Tmp;
 8001b0a:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	429e      	cmp	r6, r3
 8001b10:	d1bb      	bne.n	8001a8a <Cipher+0x1e>
    MixColumns();
    AddRoundKey(round);
 8001b12:	4628      	mov	r0, r5
  for (round = 1; round < Nr; ++round)
 8001b14:	3501      	adds	r5, #1
 8001b16:	b2ed      	uxtb	r5, r5
    AddRoundKey(round);
 8001b18:	f7ff ff44 	bl	80019a4 <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 8001b1c:	2d0a      	cmp	r5, #10
 8001b1e:	d1ac      	bne.n	8001a7a <Cipher+0xe>
  }

  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes();
 8001b20:	f7ff ff5a 	bl	80019d8 <SubBytes>
  ShiftRows();
 8001b24:	f7ff ff70 	bl	8001a08 <ShiftRows>
  AddRoundKey(Nr);
 8001b28:	4628      	mov	r0, r5
}
 8001b2a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  AddRoundKey(Nr);
 8001b2e:	f7ff bf39 	b.w	80019a4 <AddRoundKey>
 8001b32:	bf00      	nop
 8001b34:	20000c24 	.word	0x20000c24

08001b38 <AES128_ECB_indp_setkey>:
/* Public functions:                                                         */
/*****************************************************************************/

void AES128_ECB_indp_setkey(uint8_t *key)
{
  Key = key;
 8001b38:	4b01      	ldr	r3, [pc, #4]	; (8001b40 <AES128_ECB_indp_setkey+0x8>)
 8001b3a:	6018      	str	r0, [r3, #0]
  KeyExpansion();
 8001b3c:	f7ff bedc 	b.w	80018f8 <KeyExpansion>
 8001b40:	20000c24 	.word	0x20000c24

08001b44 <AES128_ECB_indp_crypto>:
}

void AES128_ECB_indp_crypto(uint8_t *input)
{
  state = (state_t *)input;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <AES128_ECB_indp_crypto+0x1c>)
 8001b46:	1e42      	subs	r2, r0, #1
 8001b48:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
  for (i = 0; i < KEYLEN; ++i)
 8001b4c:	33b8      	adds	r3, #184	; 0xb8
 8001b4e:	300f      	adds	r0, #15
    output[i] = input[i];
 8001b50:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8001b54:	f803 1b01 	strb.w	r1, [r3], #1
  for (i = 0; i < KEYLEN; ++i)
 8001b58:	4282      	cmp	r2, r0
 8001b5a:	d1f9      	bne.n	8001b50 <AES128_ECB_indp_crypto+0xc>
  BlockCopy(input_save, input);
  Cipher();
 8001b5c:	f7ff bf86 	b.w	8001a6c <Cipher>
 8001b60:	20000c24 	.word	0x20000c24

08001b64 <aes_indep_init>:
uint8_t enckey[16];

void aes_indep_init(void)
{
	;
}
 8001b64:	4770      	bx	lr

08001b66 <aes_indep_key>:

void aes_indep_key(uint8_t * key)
{
    AES128_ECB_indp_setkey(key);
 8001b66:	f7ff bfe7 	b.w	8001b38 <AES128_ECB_indp_setkey>

08001b6a <aes_indep_enc>:
}

void aes_indep_enc(uint8_t * pt)
{
	AES128_ECB_indp_crypto(pt);
 8001b6a:	f7ff bfeb 	b.w	8001b44 <AES128_ECB_indp_crypto>

08001b6e <aes_indep_enc_pretrigger>:
}

void aes_indep_enc_pretrigger(uint8_t * pt)
{
    ;
}
 8001b6e:	4770      	bx	lr

08001b70 <aes_indep_enc_posttrigger>:
 8001b70:	4770      	bx	lr

08001b72 <aes_indep_mask>:
    ;
}

void aes_indep_mask(uint8_t * m, uint8_t len)
{
}
 8001b72:	4770      	bx	lr

08001b74 <Reset_Handler>:
 8001b74:	2100      	movs	r1, #0
 8001b76:	e003      	b.n	8001b80 <LoopCopyDataInit>

08001b78 <CopyDataInit>:
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <LoopForever+0x2>)
 8001b7a:	585b      	ldr	r3, [r3, r1]
 8001b7c:	5043      	str	r3, [r0, r1]
 8001b7e:	3104      	adds	r1, #4

08001b80 <LoopCopyDataInit>:
 8001b80:	480a      	ldr	r0, [pc, #40]	; (8001bac <LoopForever+0x6>)
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopForever+0xa>)
 8001b84:	1842      	adds	r2, r0, r1
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d3f6      	bcc.n	8001b78 <CopyDataInit>
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	; (8001bb4 <LoopForever+0xe>)
 8001b8c:	e002      	b.n	8001b94 <LoopFillZerobss>

08001b8e <FillZerobss>:
 8001b8e:	2300      	movs	r3, #0
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	3204      	adds	r2, #4

08001b94 <LoopFillZerobss>:
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <LoopForever+0x12>)
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d3f9      	bcc.n	8001b8e <FillZerobss>
 8001b9a:	f3af 8000 	nop.w
 8001b9e:	f7fe fb59 	bl	8000254 <__libc_init_array>
 8001ba2:	f7fe fff7 	bl	8000b94 <main>

08001ba6 <LoopForever>:
 8001ba6:	e7fe      	b.n	8001ba6 <LoopForever>
 8001ba8:	08001c20 	.word	0x08001c20
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	20000a60 	.word	0x20000a60
 8001bb4:	20000a60 	.word	0x20000a60
 8001bb8:	20000d24 	.word	0x20000d24

08001bbc <BusFault_Handler>:
 8001bbc:	e7fe      	b.n	8001bbc <BusFault_Handler>
 8001bbe:	0000      	movs	r0, r0

08001bc0 <register_fini>:
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <register_fini+0xc>)
 8001bc2:	b113      	cbz	r3, 8001bca <register_fini+0xa>
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <register_fini+0x10>)
 8001bc6:	f7fe bb23 	b.w	8000210 <atexit>
 8001bca:	4770      	bx	lr
 8001bcc:	00000000 	.word	0x00000000
 8001bd0:	08000229 	.word	0x08000229

08001bd4 <_init>:
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	bf00      	nop
 8001bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bda:	bc08      	pop	{r3}
 8001bdc:	469e      	mov	lr, r3
 8001bde:	4770      	bx	lr

08001be0 <_fini>:
 8001be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001be2:	bf00      	nop
 8001be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be6:	bc08      	pop	{r3}
 8001be8:	469e      	mov	lr, r3
 8001bea:	4770      	bx	lr
