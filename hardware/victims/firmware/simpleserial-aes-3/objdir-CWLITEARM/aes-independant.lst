   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 4
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"aes-independant.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.aes_indep_init,"ax",%progbits
  16              		.align	1
  17              		.global	aes_indep_init
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	aes_indep_init:
  25              	.LFB0:
  26              		.file 1 ".././crypto3/aes-independant.c"
   1:.././crypto3/aes-independant.c **** /*
   2:.././crypto3/aes-independant.c ****     This file is part of the AESExplorer Example Targets
   3:.././crypto3/aes-independant.c ****     Copyright (C) 2012 Colin O'Flynn <coflynn@newae.com>
   4:.././crypto3/aes-independant.c **** 
   5:.././crypto3/aes-independant.c ****     This program is free software: you can redistribute it and/or modify
   6:.././crypto3/aes-independant.c ****     it under the terms of the GNU General Public License as published by
   7:.././crypto3/aes-independant.c ****     the Free Software Foundation, either version 3 of the License, or
   8:.././crypto3/aes-independant.c ****     (at your option) any later version.
   9:.././crypto3/aes-independant.c **** 
  10:.././crypto3/aes-independant.c ****     This program is distributed in the hope that it will be useful,
  11:.././crypto3/aes-independant.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:.././crypto3/aes-independant.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:.././crypto3/aes-independant.c ****     GNU General Public License for more details.
  14:.././crypto3/aes-independant.c **** 
  15:.././crypto3/aes-independant.c ****     You should have received a copy of the GNU General Public License
  16:.././crypto3/aes-independant.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:.././crypto3/aes-independant.c **** */
  18:.././crypto3/aes-independant.c **** 
  19:.././crypto3/aes-independant.c **** #include "aes-independant.h"
  20:.././crypto3/aes-independant.c **** #include "hal.h"
  21:.././crypto3/aes-independant.c **** 
  22:.././crypto3/aes-independant.c **** #if HWcrypto3
  23:.././crypto3/aes-independant.c **** 
  24:.././crypto3/aes-independant.c **** void aes_indep_init(void)
  25:.././crypto3/aes-independant.c **** {
  26:.././crypto3/aes-independant.c ****     HW_AES128_Init();
  27:.././crypto3/aes-independant.c **** }
  28:.././crypto3/aes-independant.c **** 
  29:.././crypto3/aes-independant.c **** void aes_indep_key(uint8_t * key)
  30:.././crypto3/aes-independant.c **** {
  31:.././crypto3/aes-independant.c ****     HW_AES128_LoadKey(key);
  32:.././crypto3/aes-independant.c **** }
  33:.././crypto3/aes-independant.c **** 
  34:.././crypto3/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
  35:.././crypto3/aes-independant.c **** {
  36:.././crypto3/aes-independant.c ****     HW_AES128_Enc_pretrigger(pt);
  37:.././crypto3/aes-independant.c **** }
  38:.././crypto3/aes-independant.c **** 
  39:.././crypto3/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
  40:.././crypto3/aes-independant.c **** {
  41:.././crypto3/aes-independant.c ****     HW_AES128_Enc_posttrigger(pt);
  42:.././crypto3/aes-independant.c **** }
  43:.././crypto3/aes-independant.c **** 
  44:.././crypto3/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
  45:.././crypto3/aes-independant.c **** {
  46:.././crypto3/aes-independant.c ****     HW_AES128_Enc(pt);
  47:.././crypto3/aes-independant.c **** }
  48:.././crypto3/aes-independant.c **** 
  49:.././crypto3/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
  50:.././crypto3/aes-independant.c **** {
  51:.././crypto3/aes-independant.c **** }
  52:.././crypto3/aes-independant.c **** 
  53:.././crypto3/aes-independant.c **** #elif defined(AVRcrypto3LIB)
  54:.././crypto3/aes-independant.c **** #include "aes128_enc.h"
  55:.././crypto3/aes-independant.c **** #include "aes_keyschedule.h"
  56:.././crypto3/aes-independant.c **** 
  57:.././crypto3/aes-independant.c **** aes128_ctx_t ctx;
  58:.././crypto3/aes-independant.c **** 
  59:.././crypto3/aes-independant.c **** void aes_indep_init(void)
  60:.././crypto3/aes-independant.c **** {
  61:.././crypto3/aes-independant.c **** 	;
  62:.././crypto3/aes-independant.c **** }
  63:.././crypto3/aes-independant.c **** 
  64:.././crypto3/aes-independant.c **** void aes_indep_key(uint8_t * key)
  65:.././crypto3/aes-independant.c **** {
  66:.././crypto3/aes-independant.c **** 	aes128_init(key, &ctx);
  67:.././crypto3/aes-independant.c **** }
  68:.././crypto3/aes-independant.c **** 
  69:.././crypto3/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
  70:.././crypto3/aes-independant.c **** {
  71:.././crypto3/aes-independant.c **** 	aes128_enc(pt, &ctx); /* encrypting the data block */
  72:.././crypto3/aes-independant.c **** }
  73:.././crypto3/aes-independant.c **** 
  74:.././crypto3/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
  75:.././crypto3/aes-independant.c **** {
  76:.././crypto3/aes-independant.c ****     ;
  77:.././crypto3/aes-independant.c **** }
  78:.././crypto3/aes-independant.c **** 
  79:.././crypto3/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
  80:.././crypto3/aes-independant.c **** {
  81:.././crypto3/aes-independant.c ****     ;
  82:.././crypto3/aes-independant.c **** }
  83:.././crypto3/aes-independant.c **** 
  84:.././crypto3/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
  85:.././crypto3/aes-independant.c **** {
  86:.././crypto3/aes-independant.c **** }
  87:.././crypto3/aes-independant.c **** 
  88:.././crypto3/aes-independant.c **** #elif defined(SIMPLEAES)
  89:.././crypto3/aes-independant.c **** 
  90:.././crypto3/aes-independant.c **** uint8_t enckey[16];
  91:.././crypto3/aes-independant.c **** 
  92:.././crypto3/aes-independant.c **** void aes_indep_init(void)
  93:.././crypto3/aes-independant.c **** {
  94:.././crypto3/aes-independant.c **** 	;
  95:.././crypto3/aes-independant.c **** }
  96:.././crypto3/aes-independant.c **** 
  97:.././crypto3/aes-independant.c **** void aes_indep_key(uint8_t * key)
  98:.././crypto3/aes-independant.c **** {
  99:.././crypto3/aes-independant.c **** 	for(uint8_t i=0; i < 16; i++){
 100:.././crypto3/aes-independant.c **** 		enckey[i] = key[i];
 101:.././crypto3/aes-independant.c **** 	}
 102:.././crypto3/aes-independant.c **** }
 103:.././crypto3/aes-independant.c **** 
 104:.././crypto3/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 105:.././crypto3/aes-independant.c **** {
 106:.././crypto3/aes-independant.c **** 	uint8_t * result = aes(pt, enckey);
 107:.././crypto3/aes-independant.c **** 	for(uint8_t i=0; i < 16; i++){
 108:.././crypto3/aes-independant.c **** 		pt[i] = result[i];
 109:.././crypto3/aes-independant.c **** 	}
 110:.././crypto3/aes-independant.c **** }
 111:.././crypto3/aes-independant.c **** 
 112:.././crypto3/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 113:.././crypto3/aes-independant.c **** {
 114:.././crypto3/aes-independant.c ****     ;
 115:.././crypto3/aes-independant.c **** }
 116:.././crypto3/aes-independant.c **** 
 117:.././crypto3/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 118:.././crypto3/aes-independant.c **** {
 119:.././crypto3/aes-independant.c ****     ;
 120:.././crypto3/aes-independant.c **** }
 121:.././crypto3/aes-independant.c **** 
 122:.././crypto3/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 123:.././crypto3/aes-independant.c **** {
 124:.././crypto3/aes-independant.c **** }
 125:.././crypto3/aes-independant.c **** 
 126:.././crypto3/aes-independant.c **** #elif defined(DPAV4)
 127:.././crypto3/aes-independant.c **** 
 128:.././crypto3/aes-independant.c **** #include "aes.h"
 129:.././crypto3/aes-independant.c **** #include "aes_enc.h"
 130:.././crypto3/aes-independant.c **** 
 131:.././crypto3/aes-independant.c **** /*  This is the AES RSM 256 encryption function that call the generic AES RSM encryption core*/
 132:.././crypto3/aes-independant.c **** void aes256_enc(uint8_t* j, void* buffer, aes256_ctx_t* ctx,uint8_t rng){
 133:.././crypto3/aes-independant.c **** 	aes_encrypt_core(j,buffer, (aes_genctx_t*)ctx, 14,(uint8_t)rng);
 134:.././crypto3/aes-independant.c **** }
 135:.././crypto3/aes-independant.c **** 
 136:.././crypto3/aes-independant.c **** aes256_ctx_t ctx;
 137:.././crypto3/aes-independant.c **** 
 138:.././crypto3/aes-independant.c **** void aes_indep_init(void)
 139:.././crypto3/aes-independant.c **** {
 140:.././crypto3/aes-independant.c ****     ;
 141:.././crypto3/aes-independant.c **** }
 142:.././crypto3/aes-independant.c **** 
 143:.././crypto3/aes-independant.c **** void aes_indep_key(uint8_t * key)
 144:.././crypto3/aes-independant.c **** {
 145:.././crypto3/aes-independant.c **** 	aes256_init(key, &ctx);
 146:.././crypto3/aes-independant.c **** }
 147:.././crypto3/aes-independant.c **** 
 148:.././crypto3/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 149:.././crypto3/aes-independant.c **** {
 150:.././crypto3/aes-independant.c **** 	static uint8_t j[0];
 151:.././crypto3/aes-independant.c **** 
 152:.././crypto3/aes-independant.c **** 	//Encryption with trigger enabled
 153:.././crypto3/aes-independant.c **** 	aes256_enc(j, pt, &ctx, 1);
 154:.././crypto3/aes-independant.c **** }
 155:.././crypto3/aes-independant.c **** 
 156:.././crypto3/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 157:.././crypto3/aes-independant.c **** {
 158:.././crypto3/aes-independant.c ****     ;
 159:.././crypto3/aes-independant.c **** }
 160:.././crypto3/aes-independant.c **** 
 161:.././crypto3/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 162:.././crypto3/aes-independant.c **** {
 163:.././crypto3/aes-independant.c ****     ;
 164:.././crypto3/aes-independant.c **** }
 165:.././crypto3/aes-independant.c **** 
 166:.././crypto3/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 167:.././crypto3/aes-independant.c **** {
 168:.././crypto3/aes-independant.c **** }
 169:.././crypto3/aes-independant.c **** 
 170:.././crypto3/aes-independant.c **** #elif defined(TINYAES128C)
 171:.././crypto3/aes-independant.c **** 
 172:.././crypto3/aes-independant.c **** #include "aes.h"
 173:.././crypto3/aes-independant.c **** 
 174:.././crypto3/aes-independant.c **** uint8_t enckey[16];
 175:.././crypto3/aes-independant.c **** 
 176:.././crypto3/aes-independant.c **** void aes_indep_init(void)
 177:.././crypto3/aes-independant.c **** {
  27              		.loc 1 177 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 178:.././crypto3/aes-independant.c **** 	;
  32              		.loc 1 178 2 view .LVU1
 179:.././crypto3/aes-independant.c **** }
  33              		.loc 1 179 1 is_stmt 0 view .LVU2
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE0:
  38              		.section	.text.aes_indep_key,"ax",%progbits
  39              		.align	1
  40              		.global	aes_indep_key
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu softvfp
  46              	aes_indep_key:
  47              	.LVL0:
  48              	.LFB1:
 180:.././crypto3/aes-independant.c **** 
 181:.././crypto3/aes-independant.c **** void aes_indep_key(uint8_t * key)
 182:.././crypto3/aes-independant.c **** {
  49              		.loc 1 182 1 is_stmt 1 view -0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              		@ link register save eliminated.
 183:.././crypto3/aes-independant.c ****     AES128_ECB_indp_setkey(key);
  54              		.loc 1 183 5 view .LVU4
  55 0000 FFF7FEBF 		b	AES128_ECB_indp_setkey
  56              	.LVL1:
  57              		.loc 1 183 5 is_stmt 0 view .LVU5
  58              		.cfi_endproc
  59              	.LFE1:
  61              		.section	.text.aes_indep_enc,"ax",%progbits
  62              		.align	1
  63              		.global	aes_indep_enc
  64              		.syntax unified
  65              		.thumb
  66              		.thumb_func
  67              		.fpu softvfp
  69              	aes_indep_enc:
  70              	.LVL2:
  71              	.LFB2:
 184:.././crypto3/aes-independant.c **** }
 185:.././crypto3/aes-independant.c **** 
 186:.././crypto3/aes-independant.c **** void aes_indep_enc(uint8_t * pt)
 187:.././crypto3/aes-independant.c **** {
  72              		.loc 1 187 1 is_stmt 1 view -0
  73              		.cfi_startproc
  74              		@ args = 0, pretend = 0, frame = 0
  75              		@ frame_needed = 0, uses_anonymous_args = 0
  76              		@ link register save eliminated.
 188:.././crypto3/aes-independant.c **** 	AES128_ECB_indp_crypto3(pt);
  77              		.loc 1 188 2 view .LVU7
  78 0000 FFF7FEBF 		b	AES128_ECB_indp_crypto3
  79              	.LVL3:
  80              		.loc 1 188 2 is_stmt 0 view .LVU8
  81              		.cfi_endproc
  82              	.LFE2:
  84              		.section	.text.aes_indep_enc_pretrigger,"ax",%progbits
  85              		.align	1
  86              		.global	aes_indep_enc_pretrigger
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu softvfp
  92              	aes_indep_enc_pretrigger:
  93              	.LVL4:
  94              	.LFB3:
 189:.././crypto3/aes-independant.c **** }
 190:.././crypto3/aes-independant.c **** 
 191:.././crypto3/aes-independant.c **** void aes_indep_enc_pretrigger(uint8_t * pt)
 192:.././crypto3/aes-independant.c **** {
  95              		.loc 1 192 1 is_stmt 1 view -0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              		@ link register save eliminated.
 193:.././crypto3/aes-independant.c ****     ;
 100              		.loc 1 193 5 view .LVU10
 194:.././crypto3/aes-independant.c **** }
 101              		.loc 1 194 1 is_stmt 0 view .LVU11
 102 0000 7047     		bx	lr
 103              		.cfi_endproc
 104              	.LFE3:
 106              		.section	.text.aes_indep_enc_posttrigger,"ax",%progbits
 107              		.align	1
 108              		.global	aes_indep_enc_posttrigger
 109              		.syntax unified
 110              		.thumb
 111              		.thumb_func
 112              		.fpu softvfp
 114              	aes_indep_enc_posttrigger:
 115              	.LFB7:
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120 0000 7047     		bx	lr
 121              		.cfi_endproc
 122              	.LFE7:
 124              		.section	.text.aes_indep_mask,"ax",%progbits
 125              		.align	1
 126              		.global	aes_indep_mask
 127              		.syntax unified
 128              		.thumb
 129              		.thumb_func
 130              		.fpu softvfp
 132              	aes_indep_mask:
 133              	.LVL5:
 134              	.LFB5:
 195:.././crypto3/aes-independant.c **** 
 196:.././crypto3/aes-independant.c **** void aes_indep_enc_posttrigger(uint8_t * pt)
 197:.././crypto3/aes-independant.c **** {
 198:.././crypto3/aes-independant.c ****     ;
 199:.././crypto3/aes-independant.c **** }
 200:.././crypto3/aes-independant.c **** 
 201:.././crypto3/aes-independant.c **** void aes_indep_mask(uint8_t * m, uint8_t len)
 202:.././crypto3/aes-independant.c **** {
 135              		.loc 1 202 1 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 203:.././crypto3/aes-independant.c **** }
 140              		.loc 1 203 1 view .LVU13
 141 0000 7047     		bx	lr
 142              		.cfi_endproc
 143              	.LFE5:
 145              		.global	enckey
 146              		.bss
 149              	enckey:
 150 0000 00000000 		.space	16
 150      00000000 
 150      00000000 
 150      00000000 
 151              		.text
 152              	.Letext0:
 153              		.file 2 ".././crypto3/tiny-AES128-C/aes.h"
 154              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 aes-independant.c
     /tmp/ccQQUzPP.s:16     .text.aes_indep_init:0000000000000000 $t
     /tmp/ccQQUzPP.s:24     .text.aes_indep_init:0000000000000000 aes_indep_init
     /tmp/ccQQUzPP.s:39     .text.aes_indep_key:0000000000000000 $t
     /tmp/ccQQUzPP.s:46     .text.aes_indep_key:0000000000000000 aes_indep_key
     /tmp/ccQQUzPP.s:62     .text.aes_indep_enc:0000000000000000 $t
     /tmp/ccQQUzPP.s:69     .text.aes_indep_enc:0000000000000000 aes_indep_enc
     /tmp/ccQQUzPP.s:85     .text.aes_indep_enc_pretrigger:0000000000000000 $t
     /tmp/ccQQUzPP.s:92     .text.aes_indep_enc_pretrigger:0000000000000000 aes_indep_enc_pretrigger
     /tmp/ccQQUzPP.s:107    .text.aes_indep_enc_posttrigger:0000000000000000 $t
     /tmp/ccQQUzPP.s:114    .text.aes_indep_enc_posttrigger:0000000000000000 aes_indep_enc_posttrigger
     /tmp/ccQQUzPP.s:125    .text.aes_indep_mask:0000000000000000 $t
     /tmp/ccQQUzPP.s:132    .text.aes_indep_mask:0000000000000000 aes_indep_mask
     /tmp/ccQQUzPP.s:149    .bss:0000000000000000 enckey
     /tmp/ccQQUzPP.s:150    .bss:0000000000000000 $d

UNDEFINED SYMBOLS
AES128_ECB_indp_setkey
AES128_ECB_indp_crypto
